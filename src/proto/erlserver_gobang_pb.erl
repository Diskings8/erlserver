%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.0.1
-module(erlserver_gobang_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_ChessPieceColor/1, enum_value_by_symbol_ChessPieceColor/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types
-type 'ChessPieceColor'() :: 'BALCK' | 'RED'.
-export_type(['ChessPieceColor'/0]).

%% message types
-type userInfoType() ::
      #{user_id                 := non_neg_integer(), % = 1, 32 bits
        nick_name               := iodata()         % = 2
       }.
-type 'StartGamePush.startDetailType'() ::
      #{color                   := 'BALCK' | 'RED' | integer(), % = 1, enum ChessPieceColor
        user                    := userInfoType()   % = 2
       }.
-type 'StartGamePush'() ::
      #{color                   := 'BALCK' | 'RED' | integer(), % = 1, enum ChessPieceColor
        remain_sec              := non_neg_integer(), % = 2, 32 bits
        per_round_remain_sec    := non_neg_integer(), % = 3, 32 bits
        detail                  => ['StartGamePush.startDetailType'()] % = 4
       }.
-type seatInfoType() ::
      #{index                   := non_neg_integer(), % = 1, 32 bits
        user                    => userInfoType()   % = 2
       }.
-type 'UserInOutPush'() ::
      #{type                    := non_neg_integer(), % = 1, 32 bits
        seat                    => seatInfoType(),  % = 2
        user                    => userInfoType()   % = 3
       }.
-type 'JoinSeatReq'() ::
      #{
       }.
-type 'JoinRoomReq'() ::
      #{join_type               := non_neg_integer(), % = 1, 32 bits
        nick_name               := iodata(),        % = 2
        sex                     := non_neg_integer(), % = 3, 32 bits
        room_id                 => non_neg_integer() % = 4, 32 bits
       }.
-type 'PlayGameReq'() ::
      #{x_pos                   := non_neg_integer(), % = 1, 32 bits
        y_pos                   := non_neg_integer() % = 2, 32 bits
       }.
-type roomInfoType() ::
      #{room_id                 := non_neg_integer(), % = 1, 32 bits
        seats                   => [seatInfoType()], % = 2
        audiences               => [userInfoType()] % = 3
       }.
-type 'EndGamePush'() ::
      #{winner                  := userInfoType()   % = 1
       }.
-type 'JoinSeatResp'() ::
      #{err_code                := non_neg_integer() % = 1, 32 bits
       }.
-type 'PrepareResp'() ::
      #{remain_sec              := non_neg_integer() % = 1, 32 bits
       }.
-type 'GetRoomsInfoResp'() ::
      #{rooms                   => [roomInfoType()] % = 1
       }.
-type 'GetRoomsInfoReq'() ::
      #{
       }.
-type 'PlayGameResp'() ::
      #{err_code                := non_neg_integer(), % = 1, 32 bits
        remain_sec              := non_neg_integer() % = 2, 32 bits
       }.
-type 'HeartBeatReq'() ::
      #{
       }.
-type 'JoinAudienceReq'() ::
      #{
       }.
-type 'HeartBeatResp'() ::
      #{
       }.
-type 'JoinRoomResp'() ::
      #{audience                := boolean() | 0 | 1, % = 1
        room                    := roomInfoType(),  % = 2
        remain_sec              => non_neg_integer() % = 3, 32 bits
       }.
-type 'PrepareReq'() ::
      #{type                    := non_neg_integer() % = 1, 32 bits
       }.
-type 'PlayBroadcastPush'() ::
      #{color                   := 'BALCK' | 'RED' | integer(), % = 1, enum ChessPieceColor
        x_pos                   := non_neg_integer(), % = 2, 32 bits
        y_pos                   := non_neg_integer() % = 3, 32 bits
       }.
-type 'JoinAudienceResp'() ::
      #{err_code                := non_neg_integer() % = 1, 32 bits
       }.
-export_type(['userInfoType'/0, 'StartGamePush.startDetailType'/0, 'StartGamePush'/0, 'seatInfoType'/0, 'UserInOutPush'/0, 'JoinSeatReq'/0, 'JoinRoomReq'/0, 'PlayGameReq'/0, 'roomInfoType'/0, 'EndGamePush'/0, 'JoinSeatResp'/0, 'PrepareResp'/0, 'GetRoomsInfoResp'/0, 'GetRoomsInfoReq'/0, 'PlayGameResp'/0, 'HeartBeatReq'/0, 'JoinAudienceReq'/0, 'HeartBeatResp'/0, 'JoinRoomResp'/0, 'PrepareReq'/0, 'PlayBroadcastPush'/0, 'JoinAudienceResp'/0]).

-spec encode_msg(userInfoType() | 'StartGamePush.startDetailType'() | 'StartGamePush'() | seatInfoType() | 'UserInOutPush'() | 'JoinSeatReq'() | 'JoinRoomReq'() | 'PlayGameReq'() | roomInfoType() | 'EndGamePush'() | 'JoinSeatResp'() | 'PrepareResp'() | 'GetRoomsInfoResp'() | 'GetRoomsInfoReq'() | 'PlayGameResp'() | 'HeartBeatReq'() | 'JoinAudienceReq'() | 'HeartBeatResp'() | 'JoinRoomResp'() | 'PrepareReq'() | 'PlayBroadcastPush'() | 'JoinAudienceResp'(),userInfoType | 'StartGamePush.startDetailType' | 'StartGamePush' | seatInfoType | 'UserInOutPush' | 'JoinSeatReq' | 'JoinRoomReq' | 'PlayGameReq' | roomInfoType | 'EndGamePush' | 'JoinSeatResp' | 'PrepareResp' | 'GetRoomsInfoResp' | 'GetRoomsInfoReq' | 'PlayGameResp' | 'HeartBeatReq' | 'JoinAudienceReq' | 'HeartBeatResp' | 'JoinRoomResp' | 'PrepareReq' | 'PlayBroadcastPush' | 'JoinAudienceResp') -> binary().
encode_msg(Msg, MsgName) ->
    encode_msg(Msg, MsgName, []).


-spec encode_msg(userInfoType() | 'StartGamePush.startDetailType'() | 'StartGamePush'() | seatInfoType() | 'UserInOutPush'() | 'JoinSeatReq'() | 'JoinRoomReq'() | 'PlayGameReq'() | roomInfoType() | 'EndGamePush'() | 'JoinSeatResp'() | 'PrepareResp'() | 'GetRoomsInfoResp'() | 'GetRoomsInfoReq'() | 'PlayGameResp'() | 'HeartBeatReq'() | 'JoinAudienceReq'() | 'HeartBeatResp'() | 'JoinRoomResp'() | 'PrepareReq'() | 'PlayBroadcastPush'() | 'JoinAudienceResp'(),userInfoType | 'StartGamePush.startDetailType' | 'StartGamePush' | seatInfoType | 'UserInOutPush' | 'JoinSeatReq' | 'JoinRoomReq' | 'PlayGameReq' | roomInfoType | 'EndGamePush' | 'JoinSeatResp' | 'PrepareResp' | 'GetRoomsInfoResp' | 'GetRoomsInfoReq' | 'PlayGameResp' | 'HeartBeatReq' | 'JoinAudienceReq' | 'HeartBeatResp' | 'JoinRoomResp' | 'PrepareReq' | 'PlayBroadcastPush' | 'JoinAudienceResp', list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      userInfoType -> e_msg_userInfoType(Msg, TrUserData);
      'StartGamePush.startDetailType' ->
	  'e_msg_StartGamePush.startDetailType'(Msg, TrUserData);
      'StartGamePush' -> e_msg_StartGamePush(Msg, TrUserData);
      seatInfoType -> e_msg_seatInfoType(Msg, TrUserData);
      'UserInOutPush' -> e_msg_UserInOutPush(Msg, TrUserData);
      'JoinSeatReq' -> e_msg_JoinSeatReq(Msg, TrUserData);
      'JoinRoomReq' -> e_msg_JoinRoomReq(Msg, TrUserData);
      'PlayGameReq' -> e_msg_PlayGameReq(Msg, TrUserData);
      roomInfoType -> e_msg_roomInfoType(Msg, TrUserData);
      'EndGamePush' -> e_msg_EndGamePush(Msg, TrUserData);
      'JoinSeatResp' -> e_msg_JoinSeatResp(Msg, TrUserData);
      'PrepareResp' -> e_msg_PrepareResp(Msg, TrUserData);
      'GetRoomsInfoResp' ->
	  e_msg_GetRoomsInfoResp(Msg, TrUserData);
      'GetRoomsInfoReq' ->
	  e_msg_GetRoomsInfoReq(Msg, TrUserData);
      'PlayGameResp' -> e_msg_PlayGameResp(Msg, TrUserData);
      'HeartBeatReq' -> e_msg_HeartBeatReq(Msg, TrUserData);
      'JoinAudienceReq' ->
	  e_msg_JoinAudienceReq(Msg, TrUserData);
      'HeartBeatResp' -> e_msg_HeartBeatResp(Msg, TrUserData);
      'JoinRoomResp' -> e_msg_JoinRoomResp(Msg, TrUserData);
      'PrepareReq' -> e_msg_PrepareReq(Msg, TrUserData);
      'PlayBroadcastPush' ->
	  e_msg_PlayBroadcastPush(Msg, TrUserData);
      'JoinAudienceResp' ->
	  e_msg_JoinAudienceResp(Msg, TrUserData)
    end.



e_msg_userInfoType(Msg, TrUserData) ->
    e_msg_userInfoType(Msg, <<>>, TrUserData).


e_msg_userInfoType(#{user_id := F1, nick_name := F2},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>)
    end.

'e_msg_StartGamePush.startDetailType'(Msg,
				      TrUserData) ->
    'e_msg_StartGamePush.startDetailType'(Msg, <<>>,
					  TrUserData).


'e_msg_StartGamePush.startDetailType'(#{color := F1,
					user := F2},
				      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_enum_ChessPieceColor(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      'e_mfield_StartGamePush.startDetailType_user'(TrF2,
						    <<B1/binary, 18>>,
						    TrUserData)
    end.

e_msg_StartGamePush(Msg, TrUserData) ->
    e_msg_StartGamePush(Msg, <<>>, TrUserData).


e_msg_StartGamePush(#{color := F1, remain_sec := F2,
		      per_round_remain_sec := F3} =
			M,
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_enum_ChessPieceColor(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_varint(TrF3, <<B2/binary, 24>>)
	 end,
    case M of
      #{detail := F4} ->
	  TrF4 = id(F4, TrUserData),
	  if TrF4 == [] -> B3;
	     true ->
		 e_field_StartGamePush_detail(TrF4, B3, TrUserData)
	  end;
      _ -> B3
    end.

e_msg_seatInfoType(Msg, TrUserData) ->
    e_msg_seatInfoType(Msg, <<>>, TrUserData).


e_msg_seatInfoType(#{index := F1} = M, Bin,
		   TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    case M of
      #{user := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    e_mfield_seatInfoType_user(TrF2, <<B1/binary, 18>>,
				       TrUserData)
	  end;
      _ -> B1
    end.

e_msg_UserInOutPush(Msg, TrUserData) ->
    e_msg_UserInOutPush(Msg, <<>>, TrUserData).


e_msg_UserInOutPush(#{type := F1} = M, Bin,
		    TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = case M of
	   #{seat := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 e_mfield_UserInOutPush_seat(TrF2, <<B1/binary, 18>>,
					     TrUserData)
	       end;
	   _ -> B1
	 end,
    case M of
      #{user := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    e_mfield_UserInOutPush_user(TrF3, <<B2/binary, 26>>,
					TrUserData)
	  end;
      _ -> B2
    end.

e_msg_JoinSeatReq(_Msg, _TrUserData) -> <<>>.

e_msg_JoinRoomReq(Msg, TrUserData) ->
    e_msg_JoinRoomReq(Msg, <<>>, TrUserData).


e_msg_JoinRoomReq(#{join_type := F1, nick_name := F2,
		    sex := F3} =
		      M,
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_varint(TrF3, <<B2/binary, 24>>)
	 end,
    case M of
      #{room_id := F4} ->
	  begin
	    TrF4 = id(F4, TrUserData),
	    e_varint(TrF4, <<B3/binary, 32>>)
	  end;
      _ -> B3
    end.

e_msg_PlayGameReq(Msg, TrUserData) ->
    e_msg_PlayGameReq(Msg, <<>>, TrUserData).


e_msg_PlayGameReq(#{x_pos := F1, y_pos := F2}, Bin,
		  TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_roomInfoType(Msg, TrUserData) ->
    e_msg_roomInfoType(Msg, <<>>, TrUserData).


e_msg_roomInfoType(#{room_id := F1} = M, Bin,
		   TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = case M of
	   #{seats := F2} ->
	       TrF2 = id(F2, TrUserData),
	       if TrF2 == [] -> B1;
		  true -> e_field_roomInfoType_seats(TrF2, B1, TrUserData)
	       end;
	   _ -> B1
	 end,
    case M of
      #{audiences := F3} ->
	  TrF3 = id(F3, TrUserData),
	  if TrF3 == [] -> B2;
	     true ->
		 e_field_roomInfoType_audiences(TrF3, B2, TrUserData)
	  end;
      _ -> B2
    end.

e_msg_EndGamePush(Msg, TrUserData) ->
    e_msg_EndGamePush(Msg, <<>>, TrUserData).


e_msg_EndGamePush(#{winner := F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_mfield_EndGamePush_winner(TrF1, <<Bin/binary, 10>>,
				  TrUserData)
    end.

e_msg_JoinSeatResp(Msg, TrUserData) ->
    e_msg_JoinSeatResp(Msg, <<>>, TrUserData).


e_msg_JoinSeatResp(#{err_code := F1}, Bin,
		   TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_PrepareResp(Msg, TrUserData) ->
    e_msg_PrepareResp(Msg, <<>>, TrUserData).


e_msg_PrepareResp(#{remain_sec := F1}, Bin,
		  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_GetRoomsInfoResp(Msg, TrUserData) ->
    e_msg_GetRoomsInfoResp(Msg, <<>>, TrUserData).


e_msg_GetRoomsInfoResp(#{} = M, Bin, TrUserData) ->
    case M of
      #{rooms := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true ->
		 e_field_GetRoomsInfoResp_rooms(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

e_msg_GetRoomsInfoReq(_Msg, _TrUserData) -> <<>>.

e_msg_PlayGameResp(Msg, TrUserData) ->
    e_msg_PlayGameResp(Msg, <<>>, TrUserData).


e_msg_PlayGameResp(#{err_code := F1, remain_sec := F2},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>)
    end.

e_msg_HeartBeatReq(_Msg, _TrUserData) -> <<>>.

e_msg_JoinAudienceReq(_Msg, _TrUserData) -> <<>>.

e_msg_HeartBeatResp(_Msg, _TrUserData) -> <<>>.

e_msg_JoinRoomResp(Msg, TrUserData) ->
    e_msg_JoinRoomResp(Msg, <<>>, TrUserData).


e_msg_JoinRoomResp(#{audience := F1, room := F2} = M,
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bool(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_mfield_JoinRoomResp_room(TrF2, <<B1/binary, 18>>,
				      TrUserData)
	 end,
    case M of
      #{remain_sec := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    e_varint(TrF3, <<B2/binary, 24>>)
	  end;
      _ -> B2
    end.

e_msg_PrepareReq(Msg, TrUserData) ->
    e_msg_PrepareReq(Msg, <<>>, TrUserData).


e_msg_PrepareReq(#{type := F1}, Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

e_msg_PlayBroadcastPush(Msg, TrUserData) ->
    e_msg_PlayBroadcastPush(Msg, <<>>, TrUserData).


e_msg_PlayBroadcastPush(#{color := F1, x_pos := F2,
			  y_pos := F3},
			Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_enum_ChessPieceColor(TrF1, <<Bin/binary, 8>>)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_varint(TrF2, <<B1/binary, 16>>)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_varint(TrF3, <<B2/binary, 24>>)
    end.

e_msg_JoinAudienceResp(Msg, TrUserData) ->
    e_msg_JoinAudienceResp(Msg, <<>>, TrUserData).


e_msg_JoinAudienceResp(#{err_code := F1}, Bin,
		       TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>)
    end.

'e_mfield_StartGamePush.startDetailType_user'(Msg, Bin,
					      TrUserData) ->
    SubBin = e_msg_userInfoType(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_StartGamePush_detail(Msg, Bin, TrUserData) ->
    SubBin = 'e_msg_StartGamePush.startDetailType'(Msg,
						   <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_StartGamePush_detail([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_StartGamePush_detail(id(Elem,
					    TrUserData),
					 Bin2, TrUserData),
    e_field_StartGamePush_detail(Rest, Bin3, TrUserData);
e_field_StartGamePush_detail([], Bin, _TrUserData) ->
    Bin.

e_mfield_seatInfoType_user(Msg, Bin, TrUserData) ->
    SubBin = e_msg_userInfoType(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_UserInOutPush_seat(Msg, Bin, TrUserData) ->
    SubBin = e_msg_seatInfoType(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_UserInOutPush_user(Msg, Bin, TrUserData) ->
    SubBin = e_msg_userInfoType(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_roomInfoType_seats(Msg, Bin, TrUserData) ->
    SubBin = e_msg_seatInfoType(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_roomInfoType_seats([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_roomInfoType_seats(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_roomInfoType_seats(Rest, Bin3, TrUserData);
e_field_roomInfoType_seats([], Bin, _TrUserData) -> Bin.

e_mfield_roomInfoType_audiences(Msg, Bin, TrUserData) ->
    SubBin = e_msg_userInfoType(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_roomInfoType_audiences([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_roomInfoType_audiences(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_roomInfoType_audiences(Rest, Bin3, TrUserData);
e_field_roomInfoType_audiences([], Bin, _TrUserData) ->
    Bin.

e_mfield_EndGamePush_winner(Msg, Bin, TrUserData) ->
    SubBin = e_msg_userInfoType(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GetRoomsInfoResp_rooms(Msg, Bin, TrUserData) ->
    SubBin = e_msg_roomInfoType(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_GetRoomsInfoResp_rooms([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_GetRoomsInfoResp_rooms(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_GetRoomsInfoResp_rooms(Rest, Bin3, TrUserData);
e_field_GetRoomsInfoResp_rooms([], Bin, _TrUserData) ->
    Bin.

e_mfield_JoinRoomResp_room(Msg, Bin, TrUserData) ->
    SubBin = e_msg_roomInfoType(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_enum_ChessPieceColor('BALCK', Bin) ->
    <<Bin/binary, 1>>;
e_enum_ChessPieceColor('RED', Bin) -> <<Bin/binary, 2>>;
e_enum_ChessPieceColor(V, Bin) -> e_varint(V, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      userInfoType ->
	  try d_msg_userInfoType(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, userInfoType, {Class, Reason, StackTrace}}}})
	  end;
      'StartGamePush.startDetailType' ->
	  try 'd_msg_StartGamePush.startDetailType'(Bin,
						    TrUserData)
	  catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'StartGamePush.startDetailType',
			 {Class, Reason, StackTrace}}}})
	  end;
      'StartGamePush' ->
	  try d_msg_StartGamePush(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'StartGamePush', {Class, Reason, StackTrace}}}})
	  end;
      seatInfoType ->
	  try d_msg_seatInfoType(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, seatInfoType, {Class, Reason, StackTrace}}}})
	  end;
      'UserInOutPush' ->
	  try d_msg_UserInOutPush(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'UserInOutPush', {Class, Reason, StackTrace}}}})
	  end;
      'JoinSeatReq' ->
	  try d_msg_JoinSeatReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'JoinSeatReq', {Class, Reason, StackTrace}}}})
	  end;
      'JoinRoomReq' ->
	  try d_msg_JoinRoomReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'JoinRoomReq', {Class, Reason, StackTrace}}}})
	  end;
      'PlayGameReq' ->
	  try d_msg_PlayGameReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'PlayGameReq', {Class, Reason, StackTrace}}}})
	  end;
      roomInfoType ->
	  try d_msg_roomInfoType(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, roomInfoType, {Class, Reason, StackTrace}}}})
	  end;
      'EndGamePush' ->
	  try d_msg_EndGamePush(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'EndGamePush', {Class, Reason, StackTrace}}}})
	  end;
      'JoinSeatResp' ->
	  try d_msg_JoinSeatResp(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'JoinSeatResp', {Class, Reason, StackTrace}}}})
	  end;
      'PrepareResp' ->
	  try d_msg_PrepareResp(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'PrepareResp', {Class, Reason, StackTrace}}}})
	  end;
      'GetRoomsInfoResp' ->
	  try d_msg_GetRoomsInfoResp(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'GetRoomsInfoResp',
			 {Class, Reason, StackTrace}}}})
	  end;
      'GetRoomsInfoReq' ->
	  try d_msg_GetRoomsInfoReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'GetRoomsInfoReq', {Class, Reason, StackTrace}}}})
	  end;
      'PlayGameResp' ->
	  try d_msg_PlayGameResp(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'PlayGameResp', {Class, Reason, StackTrace}}}})
	  end;
      'HeartBeatReq' ->
	  try d_msg_HeartBeatReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'HeartBeatReq', {Class, Reason, StackTrace}}}})
	  end;
      'JoinAudienceReq' ->
	  try d_msg_JoinAudienceReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'JoinAudienceReq', {Class, Reason, StackTrace}}}})
	  end;
      'HeartBeatResp' ->
	  try d_msg_HeartBeatResp(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'HeartBeatResp', {Class, Reason, StackTrace}}}})
	  end;
      'JoinRoomResp' ->
	  try d_msg_JoinRoomResp(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'JoinRoomResp', {Class, Reason, StackTrace}}}})
	  end;
      'PrepareReq' ->
	  try d_msg_PrepareReq(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'PrepareReq', {Class, Reason, StackTrace}}}})
	  end;
      'PlayBroadcastPush' ->
	  try d_msg_PlayBroadcastPush(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'PlayBroadcastPush',
			 {Class, Reason, StackTrace}}}})
	  end;
      'JoinAudienceResp' ->
	  try d_msg_JoinAudienceResp(Bin, TrUserData) catch
	    Class:Reason ->
		StackTrace = erlang:get_stacktrace(),
		error({gpb_error,
		       {decoding_failure,
			{Bin, 'JoinAudienceResp',
			 {Class, Reason, StackTrace}}}})
	  end
    end.



d_msg_userInfoType(Bin, TrUserData) ->
    dfp_read_field_def_userInfoType(Bin, 0, 0,
				    id('$undef', TrUserData),
				    id('$undef', TrUserData), TrUserData).

dfp_read_field_def_userInfoType(<<8, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_userInfoType_user_id(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_userInfoType(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_userInfoType_nick_name(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_userInfoType(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #{user_id => F@_1, nick_name => F@_2};
dfp_read_field_def_userInfoType(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_userInfoType(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_userInfoType(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_userInfoType(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_userInfoType(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_userInfoType_user_id(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      18 ->
	  d_field_userInfoType_nick_name(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_userInfoType(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_userInfoType(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_userInfoType(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_userInfoType(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_userInfoType(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_userInfoType(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #{user_id => F@_1, nick_name => F@_2}.

d_field_userInfoType_user_id(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_userInfoType_user_id(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_userInfoType_user_id(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_userInfoType(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_userInfoType_nick_name(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_userInfoType_nick_name(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_userInfoType_nick_name(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_userInfoType(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_userInfoType(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_userInfoType(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_userInfoType(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_userInfoType(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_userInfoType(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_userInfoType(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_userInfoType(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_userInfoType(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_userInfoType(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_userInfoType(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_userInfoType(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_userInfoType(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_userInfoType(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_userInfoType(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

'd_msg_StartGamePush.startDetailType'(Bin,
				      TrUserData) ->
    'dfp_read_field_def_StartGamePush.startDetailType'(Bin,
						       0, 0,
						       id('$undef', TrUserData),
						       id('$undef', TrUserData),
						       TrUserData).

'dfp_read_field_def_StartGamePush.startDetailType'(<<8,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData) ->
    'd_field_StartGamePush.startDetailType_color'(Rest, Z1,
						  Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_StartGamePush.startDetailType'(<<18,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData) ->
    'd_field_StartGamePush.startDetailType_user'(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_StartGamePush.startDetailType'(<<>>,
						   0, 0, F@_1, F@_2, _) ->
    #{color => F@_1, user => F@_2};
'dfp_read_field_def_StartGamePush.startDetailType'(Other,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData) ->
    'dg_read_field_def_StartGamePush.startDetailType'(Other,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

'dg_read_field_def_StartGamePush.startDetailType'(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_StartGamePush.startDetailType'(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, TrUserData);
'dg_read_field_def_StartGamePush.startDetailType'(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_StartGamePush.startDetailType_color'(Rest, 0,
							0, F@_1, F@_2,
							TrUserData);
      18 ->
	  'd_field_StartGamePush.startDetailType_user'(Rest, 0, 0,
						       F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_StartGamePush.startDetailType'(Rest, 0, 0,
							    F@_1, F@_2,
							    TrUserData);
	    1 ->
		'skip_64_StartGamePush.startDetailType'(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    2 ->
		'skip_length_delimited_StartGamePush.startDetailType'(Rest,
								      0, 0,
								      F@_1,
								      F@_2,
								      TrUserData);
	    3 ->
		'skip_group_StartGamePush.startDetailType'(Rest,
							   Key bsr 3, 0, F@_1,
							   F@_2, TrUserData);
	    5 ->
		'skip_32_StartGamePush.startDetailType'(Rest, 0, 0,
							F@_1, F@_2, TrUserData)
	  end
    end;
'dg_read_field_def_StartGamePush.startDetailType'(<<>>,
						  0, 0, F@_1, F@_2, _) ->
    #{color => F@_1, user => F@_2}.

'd_field_StartGamePush.startDetailType_color'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_StartGamePush.startDetailType_color'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, TrUserData);
'd_field_StartGamePush.startDetailType_color'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {d_enum_ChessPieceColor(begin
						   <<Res:32/signed-native>> =
						       <<(X bsl N +
							    Acc):32/unsigned-native>>,
						   Res
						 end),
			  Rest},
    'dfp_read_field_def_StartGamePush.startDetailType'(RestF,
						       0, 0, NewFValue, F@_2,
						       TrUserData).

'd_field_StartGamePush.startDetailType_user'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_StartGamePush.startDetailType_user'(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
'd_field_StartGamePush.startDetailType_user'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_userInfoType(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_StartGamePush.startDetailType'(RestF,
						       0, 0, F@_1,
						       if Prev == '$undef' ->
							      NewFValue;
							  true ->
							      merge_msg_userInfoType(Prev,
										     NewFValue,
										     TrUserData)
						       end,
						       TrUserData).

'skip_varint_StartGamePush.startDetailType'(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_StartGamePush.startDetailType'(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData);
'skip_varint_StartGamePush.startDetailType'(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_StartGamePush.startDetailType'(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData).

'skip_length_delimited_StartGamePush.startDetailType'(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2,
						      TrUserData)
    when N < 57 ->
    'skip_length_delimited_StartGamePush.startDetailType'(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, F@_2,
							  TrUserData);
'skip_length_delimited_StartGamePush.startDetailType'(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, F@_2,
						      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_StartGamePush.startDetailType'(Rest2,
						       0, 0, F@_1, F@_2,
						       TrUserData).

'skip_group_StartGamePush.startDetailType'(Bin, FNum,
					   Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_StartGamePush.startDetailType'(Rest,
						       0, Z2, F@_1, F@_2,
						       TrUserData).

'skip_32_StartGamePush.startDetailType'(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_StartGamePush.startDetailType'(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData).

'skip_64_StartGamePush.startDetailType'(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_StartGamePush.startDetailType'(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData).

d_msg_StartGamePush(Bin, TrUserData) ->
    dfp_read_field_def_StartGamePush(Bin, 0, 0,
				     id('$undef', TrUserData),
				     id('$undef', TrUserData),
				     id('$undef', TrUserData),
				     id([], TrUserData), TrUserData).

dfp_read_field_def_StartGamePush(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_StartGamePush_color(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_StartGamePush(<<16, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_StartGamePush_remain_sec(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_StartGamePush(<<24, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_StartGamePush_per_round_remain_sec(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData);
dfp_read_field_def_StartGamePush(<<34, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_StartGamePush_detail(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
dfp_read_field_def_StartGamePush(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, R1, TrUserData) ->
    #{color => F@_1, remain_sec => F@_2,
      per_round_remain_sec => F@_3,
      detail => lists_reverse(R1, TrUserData)};
dfp_read_field_def_StartGamePush(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_StartGamePush(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_StartGamePush(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_StartGamePush(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
dg_read_field_def_StartGamePush(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_StartGamePush_color(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      16 ->
	  d_field_StartGamePush_remain_sec(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, TrUserData);
      24 ->
	  d_field_StartGamePush_per_round_remain_sec(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     TrUserData);
      34 ->
	  d_field_StartGamePush_detail(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_StartGamePush(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, TrUserData);
	    1 ->
		skip_64_StartGamePush(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, TrUserData);
	    2 ->
		skip_length_delimited_StartGamePush(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
	    3 ->
		skip_group_StartGamePush(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_StartGamePush(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, TrUserData)
	  end
    end;
dg_read_field_def_StartGamePush(<<>>, 0, 0, F@_1, F@_2,
				F@_3, R1, TrUserData) ->
    #{color => F@_1, remain_sec => F@_2,
      per_round_remain_sec => F@_3,
      detail => lists_reverse(R1, TrUserData)}.

d_field_StartGamePush_color(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_StartGamePush_color(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_StartGamePush_color(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {d_enum_ChessPieceColor(begin
						   <<Res:32/signed-native>> =
						       <<(X bsl N +
							    Acc):32/unsigned-native>>,
						   Res
						 end),
			  Rest},
    dfp_read_field_def_StartGamePush(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, F@_4, TrUserData).

d_field_StartGamePush_remain_sec(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_StartGamePush_remain_sec(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
d_field_StartGamePush_remain_sec(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_StartGamePush(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, F@_4, TrUserData).

d_field_StartGamePush_per_round_remain_sec(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4,
					   TrUserData)
    when N < 57 ->
    d_field_StartGamePush_per_round_remain_sec(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, TrUserData);
d_field_StartGamePush_per_round_remain_sec(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, _, F@_4,
					   TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_StartGamePush(RestF, 0, 0, F@_1,
				     F@_2, NewFValue, F@_4, TrUserData).

d_field_StartGamePush_detail(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_StartGamePush_detail(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_StartGamePush_detail(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('d_msg_StartGamePush.startDetailType'(Bs,
								     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_StartGamePush(RestF, 0, 0, F@_1,
				     F@_2, F@_3,
				     cons(NewFValue, Prev, TrUserData),
				     TrUserData).

skip_varint_StartGamePush(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_StartGamePush(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
skip_varint_StartGamePush(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_StartGamePush(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_StartGamePush(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_StartGamePush(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
skip_length_delimited_StartGamePush(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StartGamePush(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_group_StartGamePush(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StartGamePush(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_32_StartGamePush(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_StartGamePush(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_64_StartGamePush(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_StartGamePush(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

d_msg_seatInfoType(Bin, TrUserData) ->
    dfp_read_field_def_seatInfoType(Bin, 0, 0,
				    id('$undef', TrUserData),
				    id('$undef', TrUserData), TrUserData).

dfp_read_field_def_seatInfoType(<<8, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_seatInfoType_index(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_seatInfoType(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_seatInfoType_user(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_seatInfoType(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    S1 = #{index => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{user => F@_2}
    end;
dfp_read_field_def_seatInfoType(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_seatInfoType(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_seatInfoType(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_seatInfoType(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_seatInfoType(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_seatInfoType_index(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      18 ->
	  d_field_seatInfoType_user(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_seatInfoType(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_seatInfoType(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_seatInfoType(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_seatInfoType(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_seatInfoType(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_seatInfoType(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    S1 = #{index => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{user => F@_2}
    end.

d_field_seatInfoType_index(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_seatInfoType_index(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_seatInfoType_index(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_seatInfoType(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_seatInfoType_user(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_seatInfoType_user(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_seatInfoType_user(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_userInfoType(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_seatInfoType(RestF, 0, 0, F@_1,
				    if Prev == '$undef' -> NewFValue;
				       true ->
					   merge_msg_userInfoType(Prev,
								  NewFValue,
								  TrUserData)
				    end,
				    TrUserData).

skip_varint_seatInfoType(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_seatInfoType(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_seatInfoType(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_seatInfoType(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_seatInfoType(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_seatInfoType(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_seatInfoType(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_seatInfoType(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_seatInfoType(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_seatInfoType(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_seatInfoType(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_seatInfoType(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_seatInfoType(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_seatInfoType(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

d_msg_UserInOutPush(Bin, TrUserData) ->
    dfp_read_field_def_UserInOutPush(Bin, 0, 0,
				     id('$undef', TrUserData),
				     id('$undef', TrUserData),
				     id('$undef', TrUserData), TrUserData).

dfp_read_field_def_UserInOutPush(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_UserInOutPush_type(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_UserInOutPush(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_UserInOutPush_seat(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_UserInOutPush(<<26, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_UserInOutPush_user(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_UserInOutPush(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, _) ->
    S1 = #{type => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
	    true -> S1#{seat => F@_2}
	 end,
    if F@_3 == '$undef' -> S2;
       true -> S2#{user => F@_3}
    end;
dfp_read_field_def_UserInOutPush(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, TrUserData) ->
    dg_read_field_def_UserInOutPush(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

dg_read_field_def_UserInOutPush(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_UserInOutPush(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
dg_read_field_def_UserInOutPush(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_UserInOutPush_type(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      18 ->
	  d_field_UserInOutPush_seat(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      26 ->
	  d_field_UserInOutPush_user(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_UserInOutPush(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData);
	    1 ->
		skip_64_UserInOutPush(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData);
	    2 ->
		skip_length_delimited_UserInOutPush(Rest, 0, 0, F@_1,
						    F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_UserInOutPush(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, TrUserData);
	    5 ->
		skip_32_UserInOutPush(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData)
	  end
    end;
dg_read_field_def_UserInOutPush(<<>>, 0, 0, F@_1, F@_2,
				F@_3, _) ->
    S1 = #{type => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
	    true -> S1#{seat => F@_2}
	 end,
    if F@_3 == '$undef' -> S2;
       true -> S2#{user => F@_3}
    end.

d_field_UserInOutPush_type(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_UserInOutPush_type(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_UserInOutPush_type(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_UserInOutPush(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, TrUserData).

d_field_UserInOutPush_seat(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_UserInOutPush_seat(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_UserInOutPush_seat(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_seatInfoType(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_UserInOutPush(RestF, 0, 0, F@_1,
				     if Prev == '$undef' -> NewFValue;
					true ->
					    merge_msg_seatInfoType(Prev,
								   NewFValue,
								   TrUserData)
				     end,
				     F@_3, TrUserData).

d_field_UserInOutPush_user(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_UserInOutPush_user(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_UserInOutPush_user(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_userInfoType(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_UserInOutPush(RestF, 0, 0, F@_1,
				     F@_2,
				     if Prev == '$undef' -> NewFValue;
					true ->
					    merge_msg_userInfoType(Prev,
								   NewFValue,
								   TrUserData)
				     end,
				     TrUserData).

skip_varint_UserInOutPush(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_UserInOutPush(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
skip_varint_UserInOutPush(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_UserInOutPush(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_length_delimited_UserInOutPush(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_UserInOutPush(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
skip_length_delimited_UserInOutPush(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_UserInOutPush(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, TrUserData).

skip_group_UserInOutPush(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_UserInOutPush(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_32_UserInOutPush(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_UserInOutPush(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_64_UserInOutPush(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_UserInOutPush(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

d_msg_JoinSeatReq(Bin, TrUserData) ->
    dfp_read_field_def_JoinSeatReq(Bin, 0, 0, TrUserData).

dfp_read_field_def_JoinSeatReq(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_JoinSeatReq(Other, Z1, Z2,
			       TrUserData) ->
    dg_read_field_def_JoinSeatReq(Other, Z1, Z2,
				  TrUserData).

dg_read_field_def_JoinSeatReq(<<1:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_JoinSeatReq(Rest, N + 7,
				  X bsl N + Acc, TrUserData);
dg_read_field_def_JoinSeatReq(<<0:1, X:7, Rest/binary>>,
			      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_JoinSeatReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_JoinSeatReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_JoinSeatReq(Rest, 0, 0,
					    TrUserData);
      3 ->
	  skip_group_JoinSeatReq(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_JoinSeatReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_JoinSeatReq(<<>>, 0, 0, _) -> #{}.

skip_varint_JoinSeatReq(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    skip_varint_JoinSeatReq(Rest, Z1, Z2, TrUserData);
skip_varint_JoinSeatReq(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, TrUserData) ->
    dfp_read_field_def_JoinSeatReq(Rest, Z1, Z2,
				   TrUserData).

skip_length_delimited_JoinSeatReq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_JoinSeatReq(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
skip_length_delimited_JoinSeatReq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_JoinSeatReq(Rest2, 0, 0, TrUserData).

skip_group_JoinSeatReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_JoinSeatReq(Rest, 0, Z2, TrUserData).

skip_32_JoinSeatReq(<<_:32, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_JoinSeatReq(Rest, Z1, Z2,
				   TrUserData).

skip_64_JoinSeatReq(<<_:64, Rest/binary>>, Z1, Z2,
		    TrUserData) ->
    dfp_read_field_def_JoinSeatReq(Rest, Z1, Z2,
				   TrUserData).

d_msg_JoinRoomReq(Bin, TrUserData) ->
    dfp_read_field_def_JoinRoomReq(Bin, 0, 0,
				   id('$undef', TrUserData),
				   id('$undef', TrUserData),
				   id('$undef', TrUserData),
				   id('$undef', TrUserData), TrUserData).

dfp_read_field_def_JoinRoomReq(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_JoinRoomReq_join_type(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
dfp_read_field_def_JoinRoomReq(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_JoinRoomReq_nick_name(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
dfp_read_field_def_JoinRoomReq(<<24, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_JoinRoomReq_sex(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_JoinRoomReq(<<32, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_JoinRoomReq_room_id(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_JoinRoomReq(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, _) ->
    S1 = #{join_type => F@_1, nick_name => F@_2,
	   sex => F@_3},
    if F@_4 == '$undef' -> S1;
       true -> S1#{room_id => F@_4}
    end;
dfp_read_field_def_JoinRoomReq(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_JoinRoomReq(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

dg_read_field_def_JoinRoomReq(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_JoinRoomReq(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
dg_read_field_def_JoinRoomReq(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_JoinRoomReq_join_type(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
      18 ->
	  d_field_JoinRoomReq_nick_name(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
      24 ->
	  d_field_JoinRoomReq_sex(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      32 ->
	  d_field_JoinRoomReq_room_id(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_JoinRoomReq(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, TrUserData);
	    1 ->
		skip_64_JoinRoomReq(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
	    2 ->
		skip_length_delimited_JoinRoomReq(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_JoinRoomReq(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_JoinRoomReq(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    TrUserData)
	  end
    end;
dg_read_field_def_JoinRoomReq(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, _) ->
    S1 = #{join_type => F@_1, nick_name => F@_2,
	   sex => F@_3},
    if F@_4 == '$undef' -> S1;
       true -> S1#{room_id => F@_4}
    end.

d_field_JoinRoomReq_join_type(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_JoinRoomReq_join_type(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
d_field_JoinRoomReq_join_type(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_JoinRoomReq(RestF, 0, 0, NewFValue,
				   F@_2, F@_3, F@_4, TrUserData).

d_field_JoinRoomReq_nick_name(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_JoinRoomReq_nick_name(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
d_field_JoinRoomReq_nick_name(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {binary:copy(Bytes), Rest2}
			 end,
    dfp_read_field_def_JoinRoomReq(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, F@_4, TrUserData).

d_field_JoinRoomReq_sex(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_JoinRoomReq_sex(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_JoinRoomReq_sex(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_JoinRoomReq(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, F@_4, TrUserData).

d_field_JoinRoomReq_room_id(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_JoinRoomReq_room_id(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_JoinRoomReq_room_id(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_JoinRoomReq(RestF, 0, 0, F@_1, F@_2,
				   F@_3, NewFValue, TrUserData).

skip_varint_JoinRoomReq(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_JoinRoomReq(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
skip_varint_JoinRoomReq(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_JoinRoomReq(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_length_delimited_JoinRoomReq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_JoinRoomReq(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
skip_length_delimited_JoinRoomReq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_JoinRoomReq(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_group_JoinRoomReq(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_JoinRoomReq(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_32_JoinRoomReq(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_JoinRoomReq(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

skip_64_JoinRoomReq(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_JoinRoomReq(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData).

d_msg_PlayGameReq(Bin, TrUserData) ->
    dfp_read_field_def_PlayGameReq(Bin, 0, 0,
				   id('$undef', TrUserData),
				   id('$undef', TrUserData), TrUserData).

dfp_read_field_def_PlayGameReq(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_PlayGameReq_x_pos(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_PlayGameReq(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_PlayGameReq_y_pos(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_PlayGameReq(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #{x_pos => F@_1, y_pos => F@_2};
dfp_read_field_def_PlayGameReq(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_PlayGameReq(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_PlayGameReq(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PlayGameReq(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_PlayGameReq(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_PlayGameReq_x_pos(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      16 ->
	  d_field_PlayGameReq_y_pos(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PlayGameReq(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_PlayGameReq(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_PlayGameReq(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_PlayGameReq(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_PlayGameReq(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_PlayGameReq(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #{x_pos => F@_1, y_pos => F@_2}.

d_field_PlayGameReq_x_pos(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_PlayGameReq_x_pos(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_PlayGameReq_x_pos(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_PlayGameReq(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_PlayGameReq_y_pos(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_PlayGameReq_y_pos(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_PlayGameReq_y_pos(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_PlayGameReq(RestF, 0, 0, F@_1,
				   NewFValue, TrUserData).

skip_varint_PlayGameReq(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_PlayGameReq(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_PlayGameReq(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_PlayGameReq(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_PlayGameReq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_PlayGameReq(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_PlayGameReq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PlayGameReq(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_PlayGameReq(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PlayGameReq(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_PlayGameReq(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_PlayGameReq(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_PlayGameReq(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_PlayGameReq(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

d_msg_roomInfoType(Bin, TrUserData) ->
    dfp_read_field_def_roomInfoType(Bin, 0, 0,
				    id('$undef', TrUserData),
				    id([], TrUserData), id([], TrUserData),
				    TrUserData).

dfp_read_field_def_roomInfoType(<<8, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_roomInfoType_room_id(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_roomInfoType(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_roomInfoType_seats(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_roomInfoType(<<26, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_roomInfoType_audiences(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_roomInfoType(<<>>, 0, 0, F@_1, R1,
				R2, TrUserData) ->
    #{room_id => F@_1,
      seats => lists_reverse(R1, TrUserData),
      audiences => lists_reverse(R2, TrUserData)};
dfp_read_field_def_roomInfoType(Other, Z1, Z2, F@_1,
				F@_2, F@_3, TrUserData) ->
    dg_read_field_def_roomInfoType(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, TrUserData).

dg_read_field_def_roomInfoType(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_roomInfoType(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_roomInfoType(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_roomInfoType_room_id(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      18 ->
	  d_field_roomInfoType_seats(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      26 ->
	  d_field_roomInfoType_audiences(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_roomInfoType(Rest, 0, 0, F@_1, F@_2, F@_3,
					 TrUserData);
	    1 ->
		skip_64_roomInfoType(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    2 ->
		skip_length_delimited_roomInfoType(Rest, 0, 0, F@_1,
						   F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_roomInfoType(Rest, Key bsr 3, 0, F@_1, F@_2,
					F@_3, TrUserData);
	    5 ->
		skip_32_roomInfoType(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData)
	  end
    end;
dg_read_field_def_roomInfoType(<<>>, 0, 0, F@_1, R1, R2,
			       TrUserData) ->
    #{room_id => F@_1,
      seats => lists_reverse(R1, TrUserData),
      audiences => lists_reverse(R2, TrUserData)}.

d_field_roomInfoType_room_id(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_roomInfoType_room_id(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_roomInfoType_room_id(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_roomInfoType(RestF, 0, 0, NewFValue,
				    F@_2, F@_3, TrUserData).

d_field_roomInfoType_seats(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_roomInfoType_seats(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_roomInfoType_seats(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_seatInfoType(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_roomInfoType(RestF, 0, 0, F@_1,
				    cons(NewFValue, Prev, TrUserData), F@_3,
				    TrUserData).

d_field_roomInfoType_audiences(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_roomInfoType_audiences(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_roomInfoType_audiences(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_userInfoType(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_roomInfoType(RestF, 0, 0, F@_1, F@_2,
				    cons(NewFValue, Prev, TrUserData),
				    TrUserData).

skip_varint_roomInfoType(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_roomInfoType(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
skip_varint_roomInfoType(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_roomInfoType(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

skip_length_delimited_roomInfoType(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_roomInfoType(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
skip_length_delimited_roomInfoType(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_roomInfoType(Rest2, 0, 0, F@_1, F@_2,
				    F@_3, TrUserData).

skip_group_roomInfoType(Bin, FNum, Z2, F@_1, F@_2, F@_3,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_roomInfoType(Rest, 0, Z2, F@_1, F@_2,
				    F@_3, TrUserData).

skip_32_roomInfoType(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_roomInfoType(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

skip_64_roomInfoType(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_roomInfoType(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

d_msg_EndGamePush(Bin, TrUserData) ->
    dfp_read_field_def_EndGamePush(Bin, 0, 0,
				   id('$undef', TrUserData), TrUserData).

dfp_read_field_def_EndGamePush(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_EndGamePush_winner(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_EndGamePush(<<>>, 0, 0, F@_1, _) ->
    #{winner => F@_1};
dfp_read_field_def_EndGamePush(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_EndGamePush(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_EndGamePush(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_EndGamePush(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_EndGamePush(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_EndGamePush_winner(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_EndGamePush(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_EndGamePush(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_EndGamePush(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_EndGamePush(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_EndGamePush(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_EndGamePush(<<>>, 0, 0, F@_1, _) ->
    #{winner => F@_1}.

d_field_EndGamePush_winner(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_EndGamePush_winner(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_EndGamePush_winner(<<0:1, X:7, Rest/binary>>, N,
			   Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_userInfoType(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_EndGamePush(RestF, 0, 0,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_userInfoType(Prev,
								 NewFValue,
								 TrUserData)
				   end,
				   TrUserData).

skip_varint_EndGamePush(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_EndGamePush(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_EndGamePush(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_EndGamePush(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_EndGamePush(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_EndGamePush(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_EndGamePush(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_EndGamePush(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_EndGamePush(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_EndGamePush(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_EndGamePush(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_EndGamePush(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_EndGamePush(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_EndGamePush(Rest, Z1, Z2, F@_1,
				   TrUserData).

d_msg_JoinSeatResp(Bin, TrUserData) ->
    dfp_read_field_def_JoinSeatResp(Bin, 0, 0,
				    id('$undef', TrUserData), TrUserData).

dfp_read_field_def_JoinSeatResp(<<8, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_JoinSeatResp_err_code(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_JoinSeatResp(<<>>, 0, 0, F@_1, _) ->
    #{err_code => F@_1};
dfp_read_field_def_JoinSeatResp(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_JoinSeatResp(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_JoinSeatResp(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_JoinSeatResp(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_JoinSeatResp(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_JoinSeatResp_err_code(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_JoinSeatResp(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_JoinSeatResp(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_JoinSeatResp(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_JoinSeatResp(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_JoinSeatResp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_JoinSeatResp(<<>>, 0, 0, F@_1, _) ->
    #{err_code => F@_1}.

d_field_JoinSeatResp_err_code(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_JoinSeatResp_err_code(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_JoinSeatResp_err_code(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_JoinSeatResp(RestF, 0, 0, NewFValue,
				    TrUserData).

skip_varint_JoinSeatResp(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_JoinSeatResp(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_JoinSeatResp(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_JoinSeatResp(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_JoinSeatResp(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_JoinSeatResp(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_JoinSeatResp(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_JoinSeatResp(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_JoinSeatResp(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_JoinSeatResp(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_JoinSeatResp(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_JoinSeatResp(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_JoinSeatResp(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_JoinSeatResp(Rest, Z1, Z2, F@_1,
				    TrUserData).

d_msg_PrepareResp(Bin, TrUserData) ->
    dfp_read_field_def_PrepareResp(Bin, 0, 0,
				   id('$undef', TrUserData), TrUserData).

dfp_read_field_def_PrepareResp(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_PrepareResp_remain_sec(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_PrepareResp(<<>>, 0, 0, F@_1, _) ->
    #{remain_sec => F@_1};
dfp_read_field_def_PrepareResp(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_PrepareResp(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_PrepareResp(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PrepareResp(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_PrepareResp(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_PrepareResp_remain_sec(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PrepareResp(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_PrepareResp(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_PrepareResp(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_PrepareResp(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_PrepareResp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_PrepareResp(<<>>, 0, 0, F@_1, _) ->
    #{remain_sec => F@_1}.

d_field_PrepareResp_remain_sec(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_PrepareResp_remain_sec(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_PrepareResp_remain_sec(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_PrepareResp(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_PrepareResp(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_PrepareResp(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_PrepareResp(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_PrepareResp(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_PrepareResp(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_PrepareResp(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_PrepareResp(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PrepareResp(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_PrepareResp(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PrepareResp(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_PrepareResp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_PrepareResp(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_PrepareResp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_PrepareResp(Rest, Z1, Z2, F@_1,
				   TrUserData).

d_msg_GetRoomsInfoResp(Bin, TrUserData) ->
    dfp_read_field_def_GetRoomsInfoResp(Bin, 0, 0,
					id([], TrUserData), TrUserData).

dfp_read_field_def_GetRoomsInfoResp(<<10, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_GetRoomsInfoResp_rooms(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_GetRoomsInfoResp(<<>>, 0, 0, R1,
				    TrUserData) ->
    #{rooms => lists_reverse(R1, TrUserData)};
dfp_read_field_def_GetRoomsInfoResp(Other, Z1, Z2, F@_1,
				    TrUserData) ->
    dg_read_field_def_GetRoomsInfoResp(Other, Z1, Z2, F@_1,
				       TrUserData).

dg_read_field_def_GetRoomsInfoResp(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetRoomsInfoResp(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_GetRoomsInfoResp(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetRoomsInfoResp_rooms(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetRoomsInfoResp(Rest, 0, 0, F@_1,
					     TrUserData);
	    1 ->
		skip_64_GetRoomsInfoResp(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_GetRoomsInfoResp(Rest, 0, 0, F@_1,
						       TrUserData);
	    3 ->
		skip_group_GetRoomsInfoResp(Rest, Key bsr 3, 0, F@_1,
					    TrUserData);
	    5 ->
		skip_32_GetRoomsInfoResp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_GetRoomsInfoResp(<<>>, 0, 0, R1,
				   TrUserData) ->
    #{rooms => lists_reverse(R1, TrUserData)}.

d_field_GetRoomsInfoResp_rooms(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_GetRoomsInfoResp_rooms(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_GetRoomsInfoResp_rooms(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_roomInfoType(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GetRoomsInfoResp(RestF, 0, 0,
					cons(NewFValue, Prev, TrUserData),
					TrUserData).

skip_varint_GetRoomsInfoResp(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_GetRoomsInfoResp(Rest, Z1, Z2, F@_1,
				 TrUserData);
skip_varint_GetRoomsInfoResp(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GetRoomsInfoResp(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_length_delimited_GetRoomsInfoResp(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetRoomsInfoResp(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_GetRoomsInfoResp(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetRoomsInfoResp(Rest2, 0, 0, F@_1,
					TrUserData).

skip_group_GetRoomsInfoResp(Bin, FNum, Z2, F@_1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetRoomsInfoResp(Rest, 0, Z2, F@_1,
					TrUserData).

skip_32_GetRoomsInfoResp(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_GetRoomsInfoResp(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_64_GetRoomsInfoResp(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_GetRoomsInfoResp(Rest, Z1, Z2, F@_1,
					TrUserData).

d_msg_GetRoomsInfoReq(Bin, TrUserData) ->
    dfp_read_field_def_GetRoomsInfoReq(Bin, 0, 0,
				       TrUserData).

dfp_read_field_def_GetRoomsInfoReq(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_GetRoomsInfoReq(Other, Z1, Z2,
				   TrUserData) ->
    dg_read_field_def_GetRoomsInfoReq(Other, Z1, Z2,
				      TrUserData).

dg_read_field_def_GetRoomsInfoReq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetRoomsInfoReq(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
dg_read_field_def_GetRoomsInfoReq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_GetRoomsInfoReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_GetRoomsInfoReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_GetRoomsInfoReq(Rest, 0, 0,
						TrUserData);
      3 ->
	  skip_group_GetRoomsInfoReq(Rest, Key bsr 3, 0,
				     TrUserData);
      5 -> skip_32_GetRoomsInfoReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_GetRoomsInfoReq(<<>>, 0, 0, _) -> #{}.

skip_varint_GetRoomsInfoReq(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, TrUserData) ->
    skip_varint_GetRoomsInfoReq(Rest, Z1, Z2, TrUserData);
skip_varint_GetRoomsInfoReq(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, TrUserData) ->
    dfp_read_field_def_GetRoomsInfoReq(Rest, Z1, Z2,
				       TrUserData).

skip_length_delimited_GetRoomsInfoReq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetRoomsInfoReq(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
skip_length_delimited_GetRoomsInfoReq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetRoomsInfoReq(Rest2, 0, 0,
				       TrUserData).

skip_group_GetRoomsInfoReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetRoomsInfoReq(Rest, 0, Z2,
				       TrUserData).

skip_32_GetRoomsInfoReq(<<_:32, Rest/binary>>, Z1, Z2,
			TrUserData) ->
    dfp_read_field_def_GetRoomsInfoReq(Rest, Z1, Z2,
				       TrUserData).

skip_64_GetRoomsInfoReq(<<_:64, Rest/binary>>, Z1, Z2,
			TrUserData) ->
    dfp_read_field_def_GetRoomsInfoReq(Rest, Z1, Z2,
				       TrUserData).

d_msg_PlayGameResp(Bin, TrUserData) ->
    dfp_read_field_def_PlayGameResp(Bin, 0, 0,
				    id('$undef', TrUserData),
				    id('$undef', TrUserData), TrUserData).

dfp_read_field_def_PlayGameResp(<<8, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_PlayGameResp_err_code(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_PlayGameResp(<<16, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_PlayGameResp_remain_sec(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_PlayGameResp(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #{err_code => F@_1, remain_sec => F@_2};
dfp_read_field_def_PlayGameResp(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_PlayGameResp(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_PlayGameResp(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PlayGameResp(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_PlayGameResp(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_PlayGameResp_err_code(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      16 ->
	  d_field_PlayGameResp_remain_sec(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PlayGameResp(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_PlayGameResp(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_PlayGameResp(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_PlayGameResp(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_PlayGameResp(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_PlayGameResp(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #{err_code => F@_1, remain_sec => F@_2}.

d_field_PlayGameResp_err_code(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_PlayGameResp_err_code(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_PlayGameResp_err_code(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_PlayGameResp(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_PlayGameResp_remain_sec(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_PlayGameResp_remain_sec(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_PlayGameResp_remain_sec(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_PlayGameResp(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_PlayGameResp(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_PlayGameResp(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_PlayGameResp(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_PlayGameResp(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_PlayGameResp(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_PlayGameResp(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_PlayGameResp(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PlayGameResp(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_PlayGameResp(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PlayGameResp(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_PlayGameResp(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_PlayGameResp(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_PlayGameResp(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_PlayGameResp(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

d_msg_HeartBeatReq(Bin, TrUserData) ->
    dfp_read_field_def_HeartBeatReq(Bin, 0, 0, TrUserData).

dfp_read_field_def_HeartBeatReq(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_HeartBeatReq(Other, Z1, Z2,
				TrUserData) ->
    dg_read_field_def_HeartBeatReq(Other, Z1, Z2,
				   TrUserData).

dg_read_field_def_HeartBeatReq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_HeartBeatReq(Rest, N + 7,
				   X bsl N + Acc, TrUserData);
dg_read_field_def_HeartBeatReq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_HeartBeatReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_HeartBeatReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_HeartBeatReq(Rest, 0, 0,
					     TrUserData);
      3 ->
	  skip_group_HeartBeatReq(Rest, Key bsr 3, 0, TrUserData);
      5 -> skip_32_HeartBeatReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_HeartBeatReq(<<>>, 0, 0, _) -> #{}.

skip_varint_HeartBeatReq(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    skip_varint_HeartBeatReq(Rest, Z1, Z2, TrUserData);
skip_varint_HeartBeatReq(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, TrUserData) ->
    dfp_read_field_def_HeartBeatReq(Rest, Z1, Z2,
				    TrUserData).

skip_length_delimited_HeartBeatReq(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_HeartBeatReq(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
skip_length_delimited_HeartBeatReq(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_HeartBeatReq(Rest2, 0, 0,
				    TrUserData).

skip_group_HeartBeatReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_HeartBeatReq(Rest, 0, Z2,
				    TrUserData).

skip_32_HeartBeatReq(<<_:32, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_HeartBeatReq(Rest, Z1, Z2,
				    TrUserData).

skip_64_HeartBeatReq(<<_:64, Rest/binary>>, Z1, Z2,
		     TrUserData) ->
    dfp_read_field_def_HeartBeatReq(Rest, Z1, Z2,
				    TrUserData).

d_msg_JoinAudienceReq(Bin, TrUserData) ->
    dfp_read_field_def_JoinAudienceReq(Bin, 0, 0,
				       TrUserData).

dfp_read_field_def_JoinAudienceReq(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_JoinAudienceReq(Other, Z1, Z2,
				   TrUserData) ->
    dg_read_field_def_JoinAudienceReq(Other, Z1, Z2,
				      TrUserData).

dg_read_field_def_JoinAudienceReq(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_JoinAudienceReq(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
dg_read_field_def_JoinAudienceReq(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_JoinAudienceReq(Rest, 0, 0, TrUserData);
      1 -> skip_64_JoinAudienceReq(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_JoinAudienceReq(Rest, 0, 0,
						TrUserData);
      3 ->
	  skip_group_JoinAudienceReq(Rest, Key bsr 3, 0,
				     TrUserData);
      5 -> skip_32_JoinAudienceReq(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_JoinAudienceReq(<<>>, 0, 0, _) -> #{}.

skip_varint_JoinAudienceReq(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, TrUserData) ->
    skip_varint_JoinAudienceReq(Rest, Z1, Z2, TrUserData);
skip_varint_JoinAudienceReq(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, TrUserData) ->
    dfp_read_field_def_JoinAudienceReq(Rest, Z1, Z2,
				       TrUserData).

skip_length_delimited_JoinAudienceReq(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_JoinAudienceReq(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
skip_length_delimited_JoinAudienceReq(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_JoinAudienceReq(Rest2, 0, 0,
				       TrUserData).

skip_group_JoinAudienceReq(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_JoinAudienceReq(Rest, 0, Z2,
				       TrUserData).

skip_32_JoinAudienceReq(<<_:32, Rest/binary>>, Z1, Z2,
			TrUserData) ->
    dfp_read_field_def_JoinAudienceReq(Rest, Z1, Z2,
				       TrUserData).

skip_64_JoinAudienceReq(<<_:64, Rest/binary>>, Z1, Z2,
			TrUserData) ->
    dfp_read_field_def_JoinAudienceReq(Rest, Z1, Z2,
				       TrUserData).

d_msg_HeartBeatResp(Bin, TrUserData) ->
    dfp_read_field_def_HeartBeatResp(Bin, 0, 0, TrUserData).

dfp_read_field_def_HeartBeatResp(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_HeartBeatResp(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_HeartBeatResp(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_HeartBeatResp(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_HeartBeatResp(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_HeartBeatResp(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_HeartBeatResp(Rest, 0, 0, TrUserData);
      1 -> skip_64_HeartBeatResp(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_HeartBeatResp(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_HeartBeatResp(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_HeartBeatResp(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_HeartBeatResp(<<>>, 0, 0, _) -> #{}.

skip_varint_HeartBeatResp(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_HeartBeatResp(Rest, Z1, Z2, TrUserData);
skip_varint_HeartBeatResp(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_HeartBeatResp(Rest, Z1, Z2,
				     TrUserData).

skip_length_delimited_HeartBeatResp(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_HeartBeatResp(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_HeartBeatResp(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_HeartBeatResp(Rest2, 0, 0,
				     TrUserData).

skip_group_HeartBeatResp(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_HeartBeatResp(Rest, 0, Z2,
				     TrUserData).

skip_32_HeartBeatResp(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_HeartBeatResp(Rest, Z1, Z2,
				     TrUserData).

skip_64_HeartBeatResp(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_HeartBeatResp(Rest, Z1, Z2,
				     TrUserData).

d_msg_JoinRoomResp(Bin, TrUserData) ->
    dfp_read_field_def_JoinRoomResp(Bin, 0, 0,
				    id('$undef', TrUserData),
				    id('$undef', TrUserData),
				    id('$undef', TrUserData), TrUserData).

dfp_read_field_def_JoinRoomResp(<<8, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_JoinRoomResp_audience(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_JoinRoomResp(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_JoinRoomResp_room(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_JoinRoomResp(<<24, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_JoinRoomResp_remain_sec(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
dfp_read_field_def_JoinRoomResp(<<>>, 0, 0, F@_1, F@_2,
				F@_3, _) ->
    S1 = #{audience => F@_1, room => F@_2},
    if F@_3 == '$undef' -> S1;
       true -> S1#{remain_sec => F@_3}
    end;
dfp_read_field_def_JoinRoomResp(Other, Z1, Z2, F@_1,
				F@_2, F@_3, TrUserData) ->
    dg_read_field_def_JoinRoomResp(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, TrUserData).

dg_read_field_def_JoinRoomResp(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_JoinRoomResp(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_JoinRoomResp(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_JoinRoomResp_audience(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      18 ->
	  d_field_JoinRoomResp_room(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      24 ->
	  d_field_JoinRoomResp_remain_sec(Rest, 0, 0, F@_1, F@_2,
					  F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_JoinRoomResp(Rest, 0, 0, F@_1, F@_2, F@_3,
					 TrUserData);
	    1 ->
		skip_64_JoinRoomResp(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    2 ->
		skip_length_delimited_JoinRoomResp(Rest, 0, 0, F@_1,
						   F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_JoinRoomResp(Rest, Key bsr 3, 0, F@_1, F@_2,
					F@_3, TrUserData);
	    5 ->
		skip_32_JoinRoomResp(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData)
	  end
    end;
dg_read_field_def_JoinRoomResp(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, _) ->
    S1 = #{audience => F@_1, room => F@_2},
    if F@_3 == '$undef' -> S1;
       true -> S1#{remain_sec => F@_3}
    end.

d_field_JoinRoomResp_audience(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_JoinRoomResp_audience(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_JoinRoomResp_audience(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc =/= 0, Rest},
    dfp_read_field_def_JoinRoomResp(RestF, 0, 0, NewFValue,
				    F@_2, F@_3, TrUserData).

d_field_JoinRoomResp_room(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_JoinRoomResp_room(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_JoinRoomResp_room(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(d_msg_roomInfoType(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_JoinRoomResp(RestF, 0, 0, F@_1,
				    if Prev == '$undef' -> NewFValue;
				       true ->
					   merge_msg_roomInfoType(Prev,
								  NewFValue,
								  TrUserData)
				    end,
				    F@_3, TrUserData).

d_field_JoinRoomResp_remain_sec(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_JoinRoomResp_remain_sec(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
d_field_JoinRoomResp_remain_sec(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_JoinRoomResp(RestF, 0, 0, F@_1, F@_2,
				    NewFValue, TrUserData).

skip_varint_JoinRoomResp(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_JoinRoomResp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
skip_varint_JoinRoomResp(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_JoinRoomResp(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

skip_length_delimited_JoinRoomResp(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_JoinRoomResp(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
skip_length_delimited_JoinRoomResp(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_JoinRoomResp(Rest2, 0, 0, F@_1, F@_2,
				    F@_3, TrUserData).

skip_group_JoinRoomResp(Bin, FNum, Z2, F@_1, F@_2, F@_3,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_JoinRoomResp(Rest, 0, Z2, F@_1, F@_2,
				    F@_3, TrUserData).

skip_32_JoinRoomResp(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_JoinRoomResp(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

skip_64_JoinRoomResp(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_JoinRoomResp(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

d_msg_PrepareReq(Bin, TrUserData) ->
    dfp_read_field_def_PrepareReq(Bin, 0, 0,
				  id('$undef', TrUserData), TrUserData).

dfp_read_field_def_PrepareReq(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_PrepareReq_type(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_PrepareReq(<<>>, 0, 0, F@_1, _) ->
    #{type => F@_1};
dfp_read_field_def_PrepareReq(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_PrepareReq(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_PrepareReq(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PrepareReq(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_PrepareReq(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_PrepareReq_type(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PrepareReq(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_PrepareReq(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_PrepareReq(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_PrepareReq(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_PrepareReq(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_PrepareReq(<<>>, 0, 0, F@_1, _) ->
    #{type => F@_1}.

d_field_PrepareReq_type(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_PrepareReq_type(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_PrepareReq_type(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_PrepareReq(RestF, 0, 0, NewFValue,
				  TrUserData).

skip_varint_PrepareReq(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_PrepareReq(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_PrepareReq(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_PrepareReq(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_PrepareReq(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_PrepareReq(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_PrepareReq(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PrepareReq(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_PrepareReq(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PrepareReq(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_PrepareReq(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_PrepareReq(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_PrepareReq(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_PrepareReq(Rest, Z1, Z2, F@_1,
				  TrUserData).

d_msg_PlayBroadcastPush(Bin, TrUserData) ->
    dfp_read_field_def_PlayBroadcastPush(Bin, 0, 0,
					 id('$undef', TrUserData),
					 id('$undef', TrUserData),
					 id('$undef', TrUserData), TrUserData).

dfp_read_field_def_PlayBroadcastPush(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_PlayBroadcastPush_color(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
dfp_read_field_def_PlayBroadcastPush(<<16,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_PlayBroadcastPush_x_pos(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
dfp_read_field_def_PlayBroadcastPush(<<24,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_PlayBroadcastPush_y_pos(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
dfp_read_field_def_PlayBroadcastPush(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, _) ->
    #{color => F@_1, x_pos => F@_2, y_pos => F@_3};
dfp_read_field_def_PlayBroadcastPush(Other, Z1, Z2,
				     F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_PlayBroadcastPush(Other, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData).

dg_read_field_def_PlayBroadcastPush(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_PlayBroadcastPush(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
dg_read_field_def_PlayBroadcastPush(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_PlayBroadcastPush_color(Rest, 0, 0, F@_1, F@_2,
					  F@_3, TrUserData);
      16 ->
	  d_field_PlayBroadcastPush_x_pos(Rest, 0, 0, F@_1, F@_2,
					  F@_3, TrUserData);
      24 ->
	  d_field_PlayBroadcastPush_y_pos(Rest, 0, 0, F@_1, F@_2,
					  F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_PlayBroadcastPush(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    1 ->
		skip_64_PlayBroadcastPush(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData);
	    2 ->
		skip_length_delimited_PlayBroadcastPush(Rest, 0, 0,
							F@_1, F@_2, F@_3,
							TrUserData);
	    3 ->
		skip_group_PlayBroadcastPush(Rest, Key bsr 3, 0, F@_1,
					     F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_PlayBroadcastPush(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData)
	  end
    end;
dg_read_field_def_PlayBroadcastPush(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, _) ->
    #{color => F@_1, x_pos => F@_2, y_pos => F@_3}.

d_field_PlayBroadcastPush_color(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_PlayBroadcastPush_color(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
d_field_PlayBroadcastPush_color(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {d_enum_ChessPieceColor(begin
						   <<Res:32/signed-native>> =
						       <<(X bsl N +
							    Acc):32/unsigned-native>>,
						   Res
						 end),
			  Rest},
    dfp_read_field_def_PlayBroadcastPush(RestF, 0, 0,
					 NewFValue, F@_2, F@_3, TrUserData).

d_field_PlayBroadcastPush_x_pos(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_PlayBroadcastPush_x_pos(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
d_field_PlayBroadcastPush_x_pos(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_PlayBroadcastPush(RestF, 0, 0, F@_1,
					 NewFValue, F@_3, TrUserData).

d_field_PlayBroadcastPush_y_pos(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_PlayBroadcastPush_y_pos(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
d_field_PlayBroadcastPush_y_pos(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_PlayBroadcastPush(RestF, 0, 0, F@_1,
					 F@_2, NewFValue, TrUserData).

skip_varint_PlayBroadcastPush(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_PlayBroadcastPush(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
skip_varint_PlayBroadcastPush(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_PlayBroadcastPush(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

skip_length_delimited_PlayBroadcastPush(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_PlayBroadcastPush(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    TrUserData);
skip_length_delimited_PlayBroadcastPush(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_PlayBroadcastPush(Rest2, 0, 0, F@_1,
					 F@_2, F@_3, TrUserData).

skip_group_PlayBroadcastPush(Bin, FNum, Z2, F@_1, F@_2,
			     F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_PlayBroadcastPush(Rest, 0, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

skip_32_PlayBroadcastPush(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_PlayBroadcastPush(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

skip_64_PlayBroadcastPush(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_PlayBroadcastPush(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

d_msg_JoinAudienceResp(Bin, TrUserData) ->
    dfp_read_field_def_JoinAudienceResp(Bin, 0, 0,
					id('$undef', TrUserData), TrUserData).

dfp_read_field_def_JoinAudienceResp(<<8, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_JoinAudienceResp_err_code(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_JoinAudienceResp(<<>>, 0, 0, F@_1,
				    _) ->
    #{err_code => F@_1};
dfp_read_field_def_JoinAudienceResp(Other, Z1, Z2, F@_1,
				    TrUserData) ->
    dg_read_field_def_JoinAudienceResp(Other, Z1, Z2, F@_1,
				       TrUserData).

dg_read_field_def_JoinAudienceResp(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_JoinAudienceResp(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_JoinAudienceResp(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_JoinAudienceResp_err_code(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_JoinAudienceResp(Rest, 0, 0, F@_1,
					     TrUserData);
	    1 ->
		skip_64_JoinAudienceResp(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_JoinAudienceResp(Rest, 0, 0, F@_1,
						       TrUserData);
	    3 ->
		skip_group_JoinAudienceResp(Rest, Key bsr 3, 0, F@_1,
					    TrUserData);
	    5 ->
		skip_32_JoinAudienceResp(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_JoinAudienceResp(<<>>, 0, 0, F@_1,
				   _) ->
    #{err_code => F@_1}.

d_field_JoinAudienceResp_err_code(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_JoinAudienceResp_err_code(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_JoinAudienceResp_err_code(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {X bsl N + Acc, Rest},
    dfp_read_field_def_JoinAudienceResp(RestF, 0, 0,
					NewFValue, TrUserData).

skip_varint_JoinAudienceResp(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_JoinAudienceResp(Rest, Z1, Z2, F@_1,
				 TrUserData);
skip_varint_JoinAudienceResp(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_JoinAudienceResp(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_length_delimited_JoinAudienceResp(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_JoinAudienceResp(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_JoinAudienceResp(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_JoinAudienceResp(Rest2, 0, 0, F@_1,
					TrUserData).

skip_group_JoinAudienceResp(Bin, FNum, Z2, F@_1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_JoinAudienceResp(Rest, 0, Z2, F@_1,
					TrUserData).

skip_32_JoinAudienceResp(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_JoinAudienceResp(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_64_JoinAudienceResp(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_JoinAudienceResp(Rest, Z1, Z2, F@_1,
					TrUserData).

d_enum_ChessPieceColor(1) -> 'BALCK';
d_enum_ChessPieceColor(2) -> 'RED';
d_enum_ChessPieceColor(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      userInfoType ->
	  merge_msg_userInfoType(Prev, New, TrUserData);
      'StartGamePush.startDetailType' ->
	  'merge_msg_StartGamePush.startDetailType'(Prev, New,
						    TrUserData);
      'StartGamePush' ->
	  merge_msg_StartGamePush(Prev, New, TrUserData);
      seatInfoType ->
	  merge_msg_seatInfoType(Prev, New, TrUserData);
      'UserInOutPush' ->
	  merge_msg_UserInOutPush(Prev, New, TrUserData);
      'JoinSeatReq' ->
	  merge_msg_JoinSeatReq(Prev, New, TrUserData);
      'JoinRoomReq' ->
	  merge_msg_JoinRoomReq(Prev, New, TrUserData);
      'PlayGameReq' ->
	  merge_msg_PlayGameReq(Prev, New, TrUserData);
      roomInfoType ->
	  merge_msg_roomInfoType(Prev, New, TrUserData);
      'EndGamePush' ->
	  merge_msg_EndGamePush(Prev, New, TrUserData);
      'JoinSeatResp' ->
	  merge_msg_JoinSeatResp(Prev, New, TrUserData);
      'PrepareResp' ->
	  merge_msg_PrepareResp(Prev, New, TrUserData);
      'GetRoomsInfoResp' ->
	  merge_msg_GetRoomsInfoResp(Prev, New, TrUserData);
      'GetRoomsInfoReq' ->
	  merge_msg_GetRoomsInfoReq(Prev, New, TrUserData);
      'PlayGameResp' ->
	  merge_msg_PlayGameResp(Prev, New, TrUserData);
      'HeartBeatReq' ->
	  merge_msg_HeartBeatReq(Prev, New, TrUserData);
      'JoinAudienceReq' ->
	  merge_msg_JoinAudienceReq(Prev, New, TrUserData);
      'HeartBeatResp' ->
	  merge_msg_HeartBeatResp(Prev, New, TrUserData);
      'JoinRoomResp' ->
	  merge_msg_JoinRoomResp(Prev, New, TrUserData);
      'PrepareReq' ->
	  merge_msg_PrepareReq(Prev, New, TrUserData);
      'PlayBroadcastPush' ->
	  merge_msg_PlayBroadcastPush(Prev, New, TrUserData);
      'JoinAudienceResp' ->
	  merge_msg_JoinAudienceResp(Prev, New, TrUserData)
    end.

merge_msg_userInfoType(#{},
		       #{user_id := NFuser_id, nick_name := NFnick_name}, _) ->
    #{user_id => NFuser_id, nick_name => NFnick_name}.

'merge_msg_StartGamePush.startDetailType'(#{user :=
						PFuser},
					  #{color := NFcolor, user := NFuser},
					  TrUserData) ->
    #{color => NFcolor,
      user =>
	  if PFuser /= undefined, NFuser /= undefined ->
		 merge_msg_userInfoType(PFuser, NFuser, TrUserData);
	     PFuser == undefined -> NFuser;
	     NFuser == undefined -> PFuser
	  end}.

merge_msg_StartGamePush(#{} = PMsg,
			#{color := NFcolor, remain_sec := NFremain_sec,
			  per_round_remain_sec := NFper_round_remain_sec} =
			    NMsg,
			TrUserData) ->
    S1 = #{color => NFcolor, remain_sec => NFremain_sec,
	   per_round_remain_sec => NFper_round_remain_sec},
    case {PMsg, NMsg} of
      {#{detail := PFdetail}, #{detail := NFdetail}} ->
	  S1#{detail =>
		  'erlang_++'(PFdetail, NFdetail, TrUserData)};
      {_, #{detail := NFdetail}} -> S1#{detail => NFdetail};
      {#{detail := PFdetail}, _} -> S1#{detail => PFdetail};
      {_, _} -> S1
    end.

merge_msg_seatInfoType(#{} = PMsg,
		       #{index := NFindex} = NMsg, TrUserData) ->
    S1 = #{index => NFindex},
    case {PMsg, NMsg} of
      {#{user := PFuser}, #{user := NFuser}} ->
	  S1#{user =>
		  merge_msg_userInfoType(PFuser, NFuser, TrUserData)};
      {_, #{user := NFuser}} -> S1#{user => NFuser};
      {#{user := PFuser}, _} -> S1#{user => PFuser};
      {_, _} -> S1
    end.

merge_msg_UserInOutPush(#{} = PMsg,
			#{type := NFtype} = NMsg, TrUserData) ->
    S1 = #{type => NFtype},
    S2 = case {PMsg, NMsg} of
	   {#{seat := PFseat}, #{seat := NFseat}} ->
	       S1#{seat =>
		       merge_msg_seatInfoType(PFseat, NFseat, TrUserData)};
	   {_, #{seat := NFseat}} -> S1#{seat => NFseat};
	   {#{seat := PFseat}, _} -> S1#{seat => PFseat};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{user := PFuser}, #{user := NFuser}} ->
	  S2#{user =>
		  merge_msg_userInfoType(PFuser, NFuser, TrUserData)};
      {_, #{user := NFuser}} -> S2#{user => NFuser};
      {#{user := PFuser}, _} -> S2#{user => PFuser};
      {_, _} -> S2
    end.

merge_msg_JoinSeatReq(_Prev, New, _TrUserData) -> New.

merge_msg_JoinRoomReq(#{} = PMsg,
		      #{join_type := NFjoin_type, nick_name := NFnick_name,
			sex := NFsex} =
			  NMsg,
		      _) ->
    S1 = #{join_type => NFjoin_type,
	   nick_name => NFnick_name, sex => NFsex},
    case {PMsg, NMsg} of
      {_, #{room_id := NFroom_id}} ->
	  S1#{room_id => NFroom_id};
      {#{room_id := PFroom_id}, _} ->
	  S1#{room_id => PFroom_id};
      _ -> S1
    end.

merge_msg_PlayGameReq(#{},
		      #{x_pos := NFx_pos, y_pos := NFy_pos}, _) ->
    #{x_pos => NFx_pos, y_pos => NFy_pos}.

merge_msg_roomInfoType(#{} = PMsg,
		       #{room_id := NFroom_id} = NMsg, TrUserData) ->
    S1 = #{room_id => NFroom_id},
    S2 = case {PMsg, NMsg} of
	   {#{seats := PFseats}, #{seats := NFseats}} ->
	       S1#{seats => 'erlang_++'(PFseats, NFseats, TrUserData)};
	   {_, #{seats := NFseats}} -> S1#{seats => NFseats};
	   {#{seats := PFseats}, _} -> S1#{seats => PFseats};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{audiences := PFaudiences},
       #{audiences := NFaudiences}} ->
	  S2#{audiences =>
		  'erlang_++'(PFaudiences, NFaudiences, TrUserData)};
      {_, #{audiences := NFaudiences}} ->
	  S2#{audiences => NFaudiences};
      {#{audiences := PFaudiences}, _} ->
	  S2#{audiences => PFaudiences};
      {_, _} -> S2
    end.

merge_msg_EndGamePush(#{winner := PFwinner},
		      #{winner := NFwinner}, TrUserData) ->
    #{winner =>
	  if PFwinner /= undefined, NFwinner /= undefined ->
		 merge_msg_userInfoType(PFwinner, NFwinner, TrUserData);
	     PFwinner == undefined -> NFwinner;
	     NFwinner == undefined -> PFwinner
	  end}.

merge_msg_JoinSeatResp(#{}, #{err_code := NFerr_code},
		       _) ->
    #{err_code => NFerr_code}.

merge_msg_PrepareResp(#{},
		      #{remain_sec := NFremain_sec}, _) ->
    #{remain_sec => NFremain_sec}.

merge_msg_GetRoomsInfoResp(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{rooms := PFrooms}, #{rooms := NFrooms}} ->
	  S1#{rooms => 'erlang_++'(PFrooms, NFrooms, TrUserData)};
      {_, #{rooms := NFrooms}} -> S1#{rooms => NFrooms};
      {#{rooms := PFrooms}, _} -> S1#{rooms => PFrooms};
      {_, _} -> S1
    end.

merge_msg_GetRoomsInfoReq(_Prev, New, _TrUserData) ->
    New.

merge_msg_PlayGameResp(#{},
		       #{err_code := NFerr_code, remain_sec := NFremain_sec},
		       _) ->
    #{err_code => NFerr_code, remain_sec => NFremain_sec}.

merge_msg_HeartBeatReq(_Prev, New, _TrUserData) -> New.

merge_msg_JoinAudienceReq(_Prev, New, _TrUserData) ->
    New.

merge_msg_HeartBeatResp(_Prev, New, _TrUserData) -> New.

merge_msg_JoinRoomResp(#{room := PFroom} = PMsg,
		       #{audience := NFaudience, room := NFroom} = NMsg,
		       TrUserData) ->
    S1 = #{audience => NFaudience,
	   room =>
	       if PFroom /= undefined, NFroom /= undefined ->
		      merge_msg_roomInfoType(PFroom, NFroom, TrUserData);
		  PFroom == undefined -> NFroom;
		  NFroom == undefined -> PFroom
	       end},
    case {PMsg, NMsg} of
      {_, #{remain_sec := NFremain_sec}} ->
	  S1#{remain_sec => NFremain_sec};
      {#{remain_sec := PFremain_sec}, _} ->
	  S1#{remain_sec => PFremain_sec};
      _ -> S1
    end.

merge_msg_PrepareReq(#{}, #{type := NFtype}, _) ->
    #{type => NFtype}.

merge_msg_PlayBroadcastPush(#{},
			    #{color := NFcolor, x_pos := NFx_pos,
			      y_pos := NFy_pos},
			    _) ->
    #{color => NFcolor, x_pos => NFx_pos, y_pos => NFy_pos}.

merge_msg_JoinAudienceResp(#{},
			   #{err_code := NFerr_code}, _) ->
    #{err_code => NFerr_code}.


verify_msg(Msg, MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      userInfoType ->
	  v_msg_userInfoType(Msg, [userInfoType], TrUserData);
      'StartGamePush.startDetailType' ->
	  'v_msg_StartGamePush.startDetailType'(Msg,
						['StartGamePush.startDetailType'],
						TrUserData);
      'StartGamePush' ->
	  v_msg_StartGamePush(Msg, ['StartGamePush'], TrUserData);
      seatInfoType ->
	  v_msg_seatInfoType(Msg, [seatInfoType], TrUserData);
      'UserInOutPush' ->
	  v_msg_UserInOutPush(Msg, ['UserInOutPush'], TrUserData);
      'JoinSeatReq' ->
	  v_msg_JoinSeatReq(Msg, ['JoinSeatReq'], TrUserData);
      'JoinRoomReq' ->
	  v_msg_JoinRoomReq(Msg, ['JoinRoomReq'], TrUserData);
      'PlayGameReq' ->
	  v_msg_PlayGameReq(Msg, ['PlayGameReq'], TrUserData);
      roomInfoType ->
	  v_msg_roomInfoType(Msg, [roomInfoType], TrUserData);
      'EndGamePush' ->
	  v_msg_EndGamePush(Msg, ['EndGamePush'], TrUserData);
      'JoinSeatResp' ->
	  v_msg_JoinSeatResp(Msg, ['JoinSeatResp'], TrUserData);
      'PrepareResp' ->
	  v_msg_PrepareResp(Msg, ['PrepareResp'], TrUserData);
      'GetRoomsInfoResp' ->
	  v_msg_GetRoomsInfoResp(Msg, ['GetRoomsInfoResp'],
				 TrUserData);
      'GetRoomsInfoReq' ->
	  v_msg_GetRoomsInfoReq(Msg, ['GetRoomsInfoReq'],
				TrUserData);
      'PlayGameResp' ->
	  v_msg_PlayGameResp(Msg, ['PlayGameResp'], TrUserData);
      'HeartBeatReq' ->
	  v_msg_HeartBeatReq(Msg, ['HeartBeatReq'], TrUserData);
      'JoinAudienceReq' ->
	  v_msg_JoinAudienceReq(Msg, ['JoinAudienceReq'],
				TrUserData);
      'HeartBeatResp' ->
	  v_msg_HeartBeatResp(Msg, ['HeartBeatResp'], TrUserData);
      'JoinRoomResp' ->
	  v_msg_JoinRoomResp(Msg, ['JoinRoomResp'], TrUserData);
      'PrepareReq' ->
	  v_msg_PrepareReq(Msg, ['PrepareReq'], TrUserData);
      'PlayBroadcastPush' ->
	  v_msg_PlayBroadcastPush(Msg, ['PlayBroadcastPush'],
				  TrUserData);
      'JoinAudienceResp' ->
	  v_msg_JoinAudienceResp(Msg, ['JoinAudienceResp'],
				 TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-dialyzer({nowarn_function,v_msg_userInfoType/3}).
v_msg_userInfoType(#{user_id := F1, nick_name := F2} =
		       M,
		   Path, _) ->
    v_type_uint64(F1, [user_id | Path]),
    v_type_string(F2, [nick_name | Path]),
    lists:foreach(fun (user_id) -> ok;
		      (nick_name) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_userInfoType(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [user_id, nick_name] -- maps:keys(M), userInfoType},
		  M, Path);
v_msg_userInfoType(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, userInfoType}, X, Path).

-dialyzer({nowarn_function,'v_msg_StartGamePush.startDetailType'/3}).
'v_msg_StartGamePush.startDetailType'(#{color := F1,
					user := F2} =
					  M,
				      Path, TrUserData) ->
    v_enum_ChessPieceColor(F1, [color | Path]),
    v_msg_userInfoType(F2, [user | Path], TrUserData),
    lists:foreach(fun (color) -> ok;
		      (user) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_StartGamePush.startDetailType'(M, Path,
				      _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [color, user] -- maps:keys(M),
		   'StartGamePush.startDetailType'},
		  M, Path);
'v_msg_StartGamePush.startDetailType'(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   'StartGamePush.startDetailType'},
		  X, Path).

-dialyzer({nowarn_function,v_msg_StartGamePush/3}).
v_msg_StartGamePush(#{color := F1, remain_sec := F2,
		      per_round_remain_sec := F3} =
			M,
		    Path, TrUserData) ->
    v_enum_ChessPieceColor(F1, [color | Path]),
    v_type_uint32(F2, [remain_sec | Path]),
    v_type_uint32(F3, [per_round_remain_sec | Path]),
    case M of
      #{detail := F4} ->
	  if is_list(F4) ->
		 _ = ['v_msg_StartGamePush.startDetailType'(Elem,
							    [detail | Path],
							    TrUserData)
		      || Elem <- F4],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of,
				{msg, 'StartGamePush.startDetailType'}},
			       F4, [detail | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (color) -> ok;
		      (remain_sec) -> ok;
		      (per_round_remain_sec) -> ok;
		      (detail) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_StartGamePush(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [color, remain_sec, per_round_remain_sec] --
		     maps:keys(M),
		   'StartGamePush'},
		  M, Path);
v_msg_StartGamePush(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'StartGamePush'}, X, Path).

-dialyzer({nowarn_function,v_msg_seatInfoType/3}).
v_msg_seatInfoType(#{index := F1} = M, Path,
		   TrUserData) ->
    v_type_uint32(F1, [index | Path]),
    case M of
      #{user := F2} ->
	  v_msg_userInfoType(F2, [user | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (index) -> ok;
		      (user) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_seatInfoType(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [index] -- maps:keys(M),
		   seatInfoType},
		  M, Path);
v_msg_seatInfoType(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, seatInfoType}, X, Path).

-dialyzer({nowarn_function,v_msg_UserInOutPush/3}).
v_msg_UserInOutPush(#{type := F1} = M, Path,
		    TrUserData) ->
    v_type_uint32(F1, [type | Path]),
    case M of
      #{seat := F2} ->
	  v_msg_seatInfoType(F2, [seat | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{user := F3} ->
	  v_msg_userInfoType(F3, [user | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (type) -> ok;
		      (seat) -> ok;
		      (user) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_UserInOutPush(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [type] -- maps:keys(M),
		   'UserInOutPush'},
		  M, Path);
v_msg_UserInOutPush(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'UserInOutPush'}, X, Path).

-dialyzer({nowarn_function,v_msg_JoinSeatReq/3}).
v_msg_JoinSeatReq(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_JoinSeatReq(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'JoinSeatReq'},
		  M, Path);
v_msg_JoinSeatReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'JoinSeatReq'}, X, Path).

-dialyzer({nowarn_function,v_msg_JoinRoomReq/3}).
v_msg_JoinRoomReq(#{join_type := F1, nick_name := F2,
		    sex := F3} =
		      M,
		  Path, _) ->
    v_type_uint32(F1, [join_type | Path]),
    v_type_string(F2, [nick_name | Path]),
    v_type_uint32(F3, [sex | Path]),
    case M of
      #{room_id := F4} -> v_type_uint32(F4, [room_id | Path]);
      _ -> ok
    end,
    lists:foreach(fun (join_type) -> ok;
		      (nick_name) -> ok;
		      (sex) -> ok;
		      (room_id) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_JoinRoomReq(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [join_type, nick_name, sex] -- maps:keys(M),
		   'JoinRoomReq'},
		  M, Path);
v_msg_JoinRoomReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'JoinRoomReq'}, X, Path).

-dialyzer({nowarn_function,v_msg_PlayGameReq/3}).
v_msg_PlayGameReq(#{x_pos := F1, y_pos := F2} = M, Path,
		  _) ->
    v_type_uint32(F1, [x_pos | Path]),
    v_type_uint32(F2, [y_pos | Path]),
    lists:foreach(fun (x_pos) -> ok;
		      (y_pos) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_PlayGameReq(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [x_pos, y_pos] -- maps:keys(M), 'PlayGameReq'},
		  M, Path);
v_msg_PlayGameReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PlayGameReq'}, X, Path).

-dialyzer({nowarn_function,v_msg_roomInfoType/3}).
v_msg_roomInfoType(#{room_id := F1} = M, Path,
		   TrUserData) ->
    v_type_uint32(F1, [room_id | Path]),
    case M of
      #{seats := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_seatInfoType(Elem, [seats | Path],
					 TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, seatInfoType}},
			       F2, [seats | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{audiences := F3} ->
	  if is_list(F3) ->
		 _ = [v_msg_userInfoType(Elem, [audiences | Path],
					 TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, userInfoType}},
			       F3, [audiences | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (room_id) -> ok;
		      (seats) -> ok;
		      (audiences) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_roomInfoType(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [room_id] -- maps:keys(M), roomInfoType},
		  M, Path);
v_msg_roomInfoType(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, roomInfoType}, X, Path).

-dialyzer({nowarn_function,v_msg_EndGamePush/3}).
v_msg_EndGamePush(#{winner := F1} = M, Path,
		  TrUserData) ->
    v_msg_userInfoType(F1, [winner | Path], TrUserData),
    lists:foreach(fun (winner) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_EndGamePush(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [winner] -- maps:keys(M),
		   'EndGamePush'},
		  M, Path);
v_msg_EndGamePush(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'EndGamePush'}, X, Path).

-dialyzer({nowarn_function,v_msg_JoinSeatResp/3}).
v_msg_JoinSeatResp(#{err_code := F1} = M, Path, _) ->
    v_type_uint32(F1, [err_code | Path]),
    lists:foreach(fun (err_code) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_JoinSeatResp(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [err_code] -- maps:keys(M), 'JoinSeatResp'},
		  M, Path);
v_msg_JoinSeatResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'JoinSeatResp'}, X, Path).

-dialyzer({nowarn_function,v_msg_PrepareResp/3}).
v_msg_PrepareResp(#{remain_sec := F1} = M, Path, _) ->
    v_type_uint32(F1, [remain_sec | Path]),
    lists:foreach(fun (remain_sec) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_PrepareResp(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [remain_sec] -- maps:keys(M), 'PrepareResp'},
		  M, Path);
v_msg_PrepareResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PrepareResp'}, X, Path).

-dialyzer({nowarn_function,v_msg_GetRoomsInfoResp/3}).
v_msg_GetRoomsInfoResp(#{} = M, Path, TrUserData) ->
    case M of
      #{rooms := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_roomInfoType(Elem, [rooms | Path],
					 TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, roomInfoType}},
			       F1, [rooms | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (rooms) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_GetRoomsInfoResp(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'GetRoomsInfoResp'},
		  M, Path);
v_msg_GetRoomsInfoResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetRoomsInfoResp'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_GetRoomsInfoReq/3}).
v_msg_GetRoomsInfoReq(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_GetRoomsInfoReq(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'GetRoomsInfoReq'},
		  M, Path);
v_msg_GetRoomsInfoReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetRoomsInfoReq'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_PlayGameResp/3}).
v_msg_PlayGameResp(#{err_code := F1, remain_sec := F2} =
		       M,
		   Path, _) ->
    v_type_uint32(F1, [err_code | Path]),
    v_type_uint32(F2, [remain_sec | Path]),
    lists:foreach(fun (err_code) -> ok;
		      (remain_sec) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_PlayGameResp(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [err_code, remain_sec] -- maps:keys(M), 'PlayGameResp'},
		  M, Path);
v_msg_PlayGameResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PlayGameResp'}, X, Path).

-dialyzer({nowarn_function,v_msg_HeartBeatReq/3}).
v_msg_HeartBeatReq(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_HeartBeatReq(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'HeartBeatReq'},
		  M, Path);
v_msg_HeartBeatReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'HeartBeatReq'}, X, Path).

-dialyzer({nowarn_function,v_msg_JoinAudienceReq/3}).
v_msg_JoinAudienceReq(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_JoinAudienceReq(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'JoinAudienceReq'},
		  M, Path);
v_msg_JoinAudienceReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'JoinAudienceReq'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_HeartBeatResp/3}).
v_msg_HeartBeatResp(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_HeartBeatResp(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'HeartBeatResp'},
		  M, Path);
v_msg_HeartBeatResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'HeartBeatResp'}, X, Path).

-dialyzer({nowarn_function,v_msg_JoinRoomResp/3}).
v_msg_JoinRoomResp(#{audience := F1, room := F2} = M,
		   Path, TrUserData) ->
    v_type_bool(F1, [audience | Path]),
    v_msg_roomInfoType(F2, [room | Path], TrUserData),
    case M of
      #{remain_sec := F3} ->
	  v_type_uint32(F3, [remain_sec | Path]);
      _ -> ok
    end,
    lists:foreach(fun (audience) -> ok;
		      (room) -> ok;
		      (remain_sec) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_JoinRoomResp(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [audience, room] -- maps:keys(M), 'JoinRoomResp'},
		  M, Path);
v_msg_JoinRoomResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'JoinRoomResp'}, X, Path).

-dialyzer({nowarn_function,v_msg_PrepareReq/3}).
v_msg_PrepareReq(#{type := F1} = M, Path, _) ->
    v_type_uint32(F1, [type | Path]),
    lists:foreach(fun (type) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_PrepareReq(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [type] -- maps:keys(M),
		   'PrepareReq'},
		  M, Path);
v_msg_PrepareReq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PrepareReq'}, X, Path).

-dialyzer({nowarn_function,v_msg_PlayBroadcastPush/3}).
v_msg_PlayBroadcastPush(#{color := F1, x_pos := F2,
			  y_pos := F3} =
			    M,
			Path, _) ->
    v_enum_ChessPieceColor(F1, [color | Path]),
    v_type_uint32(F2, [x_pos | Path]),
    v_type_uint32(F3, [y_pos | Path]),
    lists:foreach(fun (color) -> ok;
		      (x_pos) -> ok;
		      (y_pos) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_PlayBroadcastPush(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [color, x_pos, y_pos] -- maps:keys(M),
		   'PlayBroadcastPush'},
		  M, Path);
v_msg_PlayBroadcastPush(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'PlayBroadcastPush'}, X,
		  Path).

-dialyzer({nowarn_function,v_msg_JoinAudienceResp/3}).
v_msg_JoinAudienceResp(#{err_code := F1} = M, Path,
		       _) ->
    v_type_uint32(F1, [err_code | Path]),
    lists:foreach(fun (err_code) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_JoinAudienceResp(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields,
		   [err_code] -- maps:keys(M), 'JoinAudienceResp'},
		  M, Path);
v_msg_JoinAudienceResp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'JoinAudienceResp'}, X,
		  Path).

-dialyzer({nowarn_function,v_enum_ChessPieceColor/2}).
v_enum_ChessPieceColor('BALCK', _Path) -> ok;
v_enum_ChessPieceColor('RED', _Path) -> ok;
v_enum_ChessPieceColor(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
v_enum_ChessPieceColor(X, Path) ->
    mk_type_error({invalid_enum, 'ChessPieceColor'}, X,
		  Path).

-dialyzer({nowarn_function,v_type_sint32/2}).
v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_uint32/2}).
v_type_uint32(N, _Path) when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-dialyzer({nowarn_function,v_type_uint64/2}).
v_type_uint64(N, _Path)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-dialyzer({nowarn_function,v_type_bool/2}).
v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

-dialyzer({nowarn_function,v_type_string/2}).
v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).


-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'ChessPieceColor'},
      [{'BALCK', 1}, {'RED', 2}]},
     {{msg, userInfoType},
      [#{name => user_id, fnum => 1, rnum => 2,
	 type => uint64, occurrence => required, opts => []},
       #{name => nick_name, fnum => 2, rnum => 3,
	 type => string, occurrence => required, opts => []}]},
     {{msg, 'StartGamePush.startDetailType'},
      [#{name => color, fnum => 1, rnum => 2,
	 type => {enum, 'ChessPieceColor'},
	 occurrence => required, opts => []},
       #{name => user, fnum => 2, rnum => 3,
	 type => {msg, userInfoType}, occurrence => required,
	 opts => []}]},
     {{msg, 'StartGamePush'},
      [#{name => color, fnum => 1, rnum => 2,
	 type => {enum, 'ChessPieceColor'},
	 occurrence => required, opts => []},
       #{name => remain_sec, fnum => 2, rnum => 3,
	 type => uint32, occurrence => required, opts => []},
       #{name => per_round_remain_sec, fnum => 3, rnum => 4,
	 type => uint32, occurrence => required, opts => []},
       #{name => detail, fnum => 4, rnum => 5,
	 type => {msg, 'StartGamePush.startDetailType'},
	 occurrence => repeated, opts => []}]},
     {{msg, seatInfoType},
      [#{name => index, fnum => 1, rnum => 2, type => uint32,
	 occurrence => required, opts => []},
       #{name => user, fnum => 2, rnum => 3,
	 type => {msg, userInfoType}, occurrence => optional,
	 opts => []}]},
     {{msg, 'UserInOutPush'},
      [#{name => type, fnum => 1, rnum => 2, type => uint32,
	 occurrence => required, opts => []},
       #{name => seat, fnum => 2, rnum => 3,
	 type => {msg, seatInfoType}, occurrence => optional,
	 opts => []},
       #{name => user, fnum => 3, rnum => 4,
	 type => {msg, userInfoType}, occurrence => optional,
	 opts => []}]},
     {{msg, 'JoinSeatReq'}, []},
     {{msg, 'JoinRoomReq'},
      [#{name => join_type, fnum => 1, rnum => 2,
	 type => uint32, occurrence => required, opts => []},
       #{name => nick_name, fnum => 2, rnum => 3,
	 type => string, occurrence => required, opts => []},
       #{name => sex, fnum => 3, rnum => 4, type => uint32,
	 occurrence => required, opts => []},
       #{name => room_id, fnum => 4, rnum => 5, type => uint32,
	 occurrence => optional, opts => []}]},
     {{msg, 'PlayGameReq'},
      [#{name => x_pos, fnum => 1, rnum => 2, type => uint32,
	 occurrence => required, opts => []},
       #{name => y_pos, fnum => 2, rnum => 3, type => uint32,
	 occurrence => required, opts => []}]},
     {{msg, roomInfoType},
      [#{name => room_id, fnum => 1, rnum => 2,
	 type => uint32, occurrence => required, opts => []},
       #{name => seats, fnum => 2, rnum => 3,
	 type => {msg, seatInfoType}, occurrence => repeated,
	 opts => []},
       #{name => audiences, fnum => 3, rnum => 4,
	 type => {msg, userInfoType}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'EndGamePush'},
      [#{name => winner, fnum => 1, rnum => 2,
	 type => {msg, userInfoType}, occurrence => required,
	 opts => []}]},
     {{msg, 'JoinSeatResp'},
      [#{name => err_code, fnum => 1, rnum => 2,
	 type => uint32, occurrence => required, opts => []}]},
     {{msg, 'PrepareResp'},
      [#{name => remain_sec, fnum => 1, rnum => 2,
	 type => uint32, occurrence => required, opts => []}]},
     {{msg, 'GetRoomsInfoResp'},
      [#{name => rooms, fnum => 1, rnum => 2,
	 type => {msg, roomInfoType}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'GetRoomsInfoReq'}, []},
     {{msg, 'PlayGameResp'},
      [#{name => err_code, fnum => 1, rnum => 2,
	 type => uint32, occurrence => required, opts => []},
       #{name => remain_sec, fnum => 2, rnum => 3,
	 type => uint32, occurrence => required, opts => []}]},
     {{msg, 'HeartBeatReq'}, []},
     {{msg, 'JoinAudienceReq'}, []},
     {{msg, 'HeartBeatResp'}, []},
     {{msg, 'JoinRoomResp'},
      [#{name => audience, fnum => 1, rnum => 2, type => bool,
	 occurrence => required, opts => []},
       #{name => room, fnum => 2, rnum => 3,
	 type => {msg, roomInfoType}, occurrence => required,
	 opts => []},
       #{name => remain_sec, fnum => 3, rnum => 4,
	 type => uint32, occurrence => optional, opts => []}]},
     {{msg, 'PrepareReq'},
      [#{name => type, fnum => 1, rnum => 2, type => uint32,
	 occurrence => required, opts => []}]},
     {{msg, 'PlayBroadcastPush'},
      [#{name => color, fnum => 1, rnum => 2,
	 type => {enum, 'ChessPieceColor'},
	 occurrence => required, opts => []},
       #{name => x_pos, fnum => 2, rnum => 3, type => uint32,
	 occurrence => required, opts => []},
       #{name => y_pos, fnum => 3, rnum => 4, type => uint32,
	 occurrence => required, opts => []}]},
     {{msg, 'JoinAudienceResp'},
      [#{name => err_code, fnum => 1, rnum => 2,
	 type => uint32, occurrence => required, opts => []}]}].


get_msg_names() ->
    [userInfoType, 'StartGamePush.startDetailType',
     'StartGamePush', seatInfoType, 'UserInOutPush',
     'JoinSeatReq', 'JoinRoomReq', 'PlayGameReq',
     roomInfoType, 'EndGamePush', 'JoinSeatResp',
     'PrepareResp', 'GetRoomsInfoResp', 'GetRoomsInfoReq',
     'PlayGameResp', 'HeartBeatReq', 'JoinAudienceReq',
     'HeartBeatResp', 'JoinRoomResp', 'PrepareReq',
     'PlayBroadcastPush', 'JoinAudienceResp'].


get_group_names() -> [].


get_msg_or_group_names() ->
    [userInfoType, 'StartGamePush.startDetailType',
     'StartGamePush', seatInfoType, 'UserInOutPush',
     'JoinSeatReq', 'JoinRoomReq', 'PlayGameReq',
     roomInfoType, 'EndGamePush', 'JoinSeatResp',
     'PrepareResp', 'GetRoomsInfoResp', 'GetRoomsInfoReq',
     'PlayGameResp', 'HeartBeatReq', 'JoinAudienceReq',
     'HeartBeatResp', 'JoinRoomResp', 'PrepareReq',
     'PlayBroadcastPush', 'JoinAudienceResp'].


get_enum_names() -> ['ChessPieceColor'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(userInfoType) ->
    [#{name => user_id, fnum => 1, rnum => 2,
       type => uint64, occurrence => required, opts => []},
     #{name => nick_name, fnum => 2, rnum => 3,
       type => string, occurrence => required, opts => []}];
find_msg_def('StartGamePush.startDetailType') ->
    [#{name => color, fnum => 1, rnum => 2,
       type => {enum, 'ChessPieceColor'},
       occurrence => required, opts => []},
     #{name => user, fnum => 2, rnum => 3,
       type => {msg, userInfoType}, occurrence => required,
       opts => []}];
find_msg_def('StartGamePush') ->
    [#{name => color, fnum => 1, rnum => 2,
       type => {enum, 'ChessPieceColor'},
       occurrence => required, opts => []},
     #{name => remain_sec, fnum => 2, rnum => 3,
       type => uint32, occurrence => required, opts => []},
     #{name => per_round_remain_sec, fnum => 3, rnum => 4,
       type => uint32, occurrence => required, opts => []},
     #{name => detail, fnum => 4, rnum => 5,
       type => {msg, 'StartGamePush.startDetailType'},
       occurrence => repeated, opts => []}];
find_msg_def(seatInfoType) ->
    [#{name => index, fnum => 1, rnum => 2, type => uint32,
       occurrence => required, opts => []},
     #{name => user, fnum => 2, rnum => 3,
       type => {msg, userInfoType}, occurrence => optional,
       opts => []}];
find_msg_def('UserInOutPush') ->
    [#{name => type, fnum => 1, rnum => 2, type => uint32,
       occurrence => required, opts => []},
     #{name => seat, fnum => 2, rnum => 3,
       type => {msg, seatInfoType}, occurrence => optional,
       opts => []},
     #{name => user, fnum => 3, rnum => 4,
       type => {msg, userInfoType}, occurrence => optional,
       opts => []}];
find_msg_def('JoinSeatReq') -> [];
find_msg_def('JoinRoomReq') ->
    [#{name => join_type, fnum => 1, rnum => 2,
       type => uint32, occurrence => required, opts => []},
     #{name => nick_name, fnum => 2, rnum => 3,
       type => string, occurrence => required, opts => []},
     #{name => sex, fnum => 3, rnum => 4, type => uint32,
       occurrence => required, opts => []},
     #{name => room_id, fnum => 4, rnum => 5, type => uint32,
       occurrence => optional, opts => []}];
find_msg_def('PlayGameReq') ->
    [#{name => x_pos, fnum => 1, rnum => 2, type => uint32,
       occurrence => required, opts => []},
     #{name => y_pos, fnum => 2, rnum => 3, type => uint32,
       occurrence => required, opts => []}];
find_msg_def(roomInfoType) ->
    [#{name => room_id, fnum => 1, rnum => 2,
       type => uint32, occurrence => required, opts => []},
     #{name => seats, fnum => 2, rnum => 3,
       type => {msg, seatInfoType}, occurrence => repeated,
       opts => []},
     #{name => audiences, fnum => 3, rnum => 4,
       type => {msg, userInfoType}, occurrence => repeated,
       opts => []}];
find_msg_def('EndGamePush') ->
    [#{name => winner, fnum => 1, rnum => 2,
       type => {msg, userInfoType}, occurrence => required,
       opts => []}];
find_msg_def('JoinSeatResp') ->
    [#{name => err_code, fnum => 1, rnum => 2,
       type => uint32, occurrence => required, opts => []}];
find_msg_def('PrepareResp') ->
    [#{name => remain_sec, fnum => 1, rnum => 2,
       type => uint32, occurrence => required, opts => []}];
find_msg_def('GetRoomsInfoResp') ->
    [#{name => rooms, fnum => 1, rnum => 2,
       type => {msg, roomInfoType}, occurrence => repeated,
       opts => []}];
find_msg_def('GetRoomsInfoReq') -> [];
find_msg_def('PlayGameResp') ->
    [#{name => err_code, fnum => 1, rnum => 2,
       type => uint32, occurrence => required, opts => []},
     #{name => remain_sec, fnum => 2, rnum => 3,
       type => uint32, occurrence => required, opts => []}];
find_msg_def('HeartBeatReq') -> [];
find_msg_def('JoinAudienceReq') -> [];
find_msg_def('HeartBeatResp') -> [];
find_msg_def('JoinRoomResp') ->
    [#{name => audience, fnum => 1, rnum => 2, type => bool,
       occurrence => required, opts => []},
     #{name => room, fnum => 2, rnum => 3,
       type => {msg, roomInfoType}, occurrence => required,
       opts => []},
     #{name => remain_sec, fnum => 3, rnum => 4,
       type => uint32, occurrence => optional, opts => []}];
find_msg_def('PrepareReq') ->
    [#{name => type, fnum => 1, rnum => 2, type => uint32,
       occurrence => required, opts => []}];
find_msg_def('PlayBroadcastPush') ->
    [#{name => color, fnum => 1, rnum => 2,
       type => {enum, 'ChessPieceColor'},
       occurrence => required, opts => []},
     #{name => x_pos, fnum => 2, rnum => 3, type => uint32,
       occurrence => required, opts => []},
     #{name => y_pos, fnum => 3, rnum => 4, type => uint32,
       occurrence => required, opts => []}];
find_msg_def('JoinAudienceResp') ->
    [#{name => err_code, fnum => 1, rnum => 2,
       type => uint32, occurrence => required, opts => []}];
find_msg_def(_) -> error.


find_enum_def('ChessPieceColor') ->
    [{'BALCK', 1}, {'RED', 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('ChessPieceColor', Value) ->
    enum_symbol_by_value_ChessPieceColor(Value).


enum_value_by_symbol('ChessPieceColor', Sym) ->
    enum_value_by_symbol_ChessPieceColor(Sym).


enum_symbol_by_value_ChessPieceColor(1) -> 'BALCK';
enum_symbol_by_value_ChessPieceColor(2) -> 'RED'.


enum_value_by_symbol_ChessPieceColor('BALCK') -> 1;
enum_value_by_symbol_ChessPieceColor('RED') -> 2.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.0.1".

gpb_version_as_list() ->
    [4,0,1].
